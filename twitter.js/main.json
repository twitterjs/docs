{"meta":{"version":"0.3.3","format":20,"date":1648975070811},"custom":{"getting-started":{"name":"getting-started","files":{"Introduction":{"name":"Introduction","type":"md","content":"<div align=\"center\">\n  <p>\n    <a href=\"https://github.com/twitterjs/twitter.js\"><img src=\"https://raw.githubusercontent.com/twitterjs/guide/main/src/.vuepress/public/branding/banner_small.png\" title=\"Twitter.js\" alt=\"twitter.js github\" /></a>\n  </p>\n  <p>\n    <a href=\"https://discord.gg/f5Pefuskx4\"><img src=\"https://img.shields.io/discord/791722432896434237?color=5865F2&label=discord&logo=discord&logoColor=white&style=flat-square\" alt=\"twitter.js official discord server\" /></a>\n    <a href=\"https://www.npmjs.com/package/twitter.js\"><img src=\"https://img.shields.io/npm/v/twitter.js?color=ff2511&style=flat-square\" alt=\"NPM version\" /></a>\n    <a href=\"https://www.npmjs.com/package/twitter.js\"><img src=\"https://img.shields.io/npm/dt/twitter.js?color=1DB954&style=flat-square\" alt=\"NPM downloads\" /></a>\n    <a href=\"https://developer.twitter.com/en/docs/twitter-api/early-access\"><img src=\"https://img.shields.io/endpoint?url=https%3A%2F%2Ftwbadges.glitch.me%2Fbadges%2Fv2&style=flat-square\" alt=\"Twitter API v2\" /></a>\n  </p>\n</div>\n\n# Twitter.js\n\nA Node.js and TypeScript library for interacting with Twitter API v2\n\n## Installation\n\n```bash\nnpm i twitter.js\n```\n\n## Usage\n\n🚀 Fetch details about a twitter user in no time:\n\n```js\nimport { Client } from 'twitter.js';\nimport { bearerToken } from './secrets.js';\n\nconst client = new Client();\nawait client.loginWithBearerToken(bearerToken);\n\nconst user = await client.users.fetchByUsername('iShiibi');\nconsole.log(user.description); // Contributing to open-source 🌐\n```\n\n🔒 Make [`user-context`](https://developer.twitter.com/en/docs/authentication/oauth-1-0a) authorized requests without any hassle:\n\n```js\nimport { Client } from 'twitter.js';\nimport { credentials } from './secrets.js';\n\nconst client = new Client();\nawait client.login(credentials);\n\nconst tweet = await client.tweets.fetch('1336749579228745728');\nawait tweet.like();\n```\n\n📈 Want real-time events listening? We got you covered:\n\n```js\nimport { Client } from 'twitter.js';\nimport { credentials } from './secrets.js';\n\nconst client = new Client({ events: ['FILTERED_TWEET_CREATE'] });\nawait client.login(credentials);\n\nawait client.filteredStreamRules.create({ value: '@tjs_test' });\n\nclient.on('filteredTweetCreate', async tweet => {\n\tconsole.log(tweet.text); // hey @tjs_test, like this tweet if you're listening!\n\tawait tweet.like();\n});\n```\n\n## Future\n\nThe `twitter.js` library is not ready for production use yet. You can expect breaking changes without any major version bump until we release `v1.0.0` of the library.\n\nThere is an autogenerated [documentation website](https://twitter.js.org) for API references. We hope to replace it with a custom one soon. If you love web development, then feel free to discuss how you can contribute towards this goal in our [Discord server](https://discord.gg/f5Pefuskx4).\n\nWe are also building a [guide website](https://twitterjs-guide.pages.dev) to teach new users how to use the `twitter.js` library.\n","path":"README.md"},"Installation":{"name":"Installation","type":"md","content":"# Installation\n\nThis tutorial will help you setup a basic twitter bot project. You will create a new folder, install the `twitter.js` package, write some test code, and finally execute it locally to check whether it's working. So, let's get started, open a terminal on your machine and follow the steps given below.\n\n**1. Create a new directory for your twitter bot project and move into it:**\n\n```bash:no-line-numbers\nmkdir twitter-bot\ncd twitter-bot\n```\n\nOpen the directory you created in an IDE or text-editor of your choice.\n\n**2. Initialize your project:**\n\n```bash:no-line-numbers\nnpm init -y\n```\n\nThis will create a new `package.json` file in the current directory.\n\n**3. Install twitter.js package from npm:**\n\n```bash:no-line-numbers\nnpm install twitter.js\n```\n\n**4. Open the `package.json` file and add the following highlighted lines to it:**\n\n```json{7,15}\n{\n  \"name\": \"twitter-bot\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node index.js\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"twitter.js\": \"^0.13.0\"\n  },\n  \"type\": \"module\"\n}\n```\n\n**5. Create a new `index.js` file and write the following basic code in it:**\n\n```js\nimport { Client } from 'twitter.js';\n\nconst client = new Client();\n\nconsole.log(client.readyAt); // null\n```\n\n**6. Execute the code you have written in `index.js` file:**\n\n```bash:no-line-numbers\nnpm start\n```\n\nIf you get `null` printed in the terminal then congratulations, you successfully completed the initial setup for your twitter bot project.\n\nCurrently, your code isn't really doing anything. You will need to generate some credentials from twitter developer portal to continue further and actually create a working twitter bot.\n","path":"docs/Installation.md"}}}},"classes":[{"name":"BaseBook","description":"The base class for all books","construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]},{"name":"options","optional":true,"type":[[["BaseBookOptions"]]]}],"returns":[[["BaseBook"]]],"meta":{"line":49,"file":"BaseBook.ts","path":"src/books"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseBook.ts","path":"src/books"}},{"name":"hasMore","description":"Whether there are more pages of tweets to be fetched","type":[[["boolean"]]],"meta":{"line":44,"file":"BaseBook.ts","path":"src/books"}},{"name":"maxResultsPerPage","description":"The maximum amount of tweets that will be fetched per page.","type":[[["null"," | "],["number"]]],"meta":{"line":37,"file":"BaseBook.ts","path":"src/books"}}],"meta":{"line":6,"file":"BaseBook.ts","path":"src/books"}},{"name":"BaseClient","description":"The base client class","extends":["EventEmitter"],"construct":{"name":"constructor","params":[{"name":"options","description":"The options to initialize the client with","optional":true,"type":[[["ClientOptions"]]]}],"returns":[[["BaseClient"]]],"meta":{"line":31,"file":"BaseClient.ts","path":"src/client"}},"props":[{"name":"options","description":"The options passed to the client during initialization","type":[[["ClientOptions"]]],"meta":{"line":26,"file":"BaseClient.ts","path":"src/client"}},{"name":"captureRejectionSymbol","scope":"static","readonly":true,"type":[[["("],["typeof"," "],["captureRejectionSymbol",")"]]],"meta":{"line":301,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"captureRejections","description":"Sets or gets the default captureRejection value for all emitters.","scope":"static","type":[[["boolean"]]],"meta":{"line":306,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"defaultMaxListeners","scope":"static","type":[[["number"]]],"meta":{"line":307,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"errorMonitor","description":"This symbol shall be used to install a listener for only monitoring `'error'`\nevents. Listeners installed using this symbol are called before the regular\n`'error'` listeners are called.","scope":"static","readonly":true,"type":[[["("],["typeof"," "],["errorMonitor",")"]]],"meta":{"line":300,"file":"events.d.ts","path":"node_modules/@types/node"}}],"methods":[{"name":"addListener","description":"Alias for `emitter.on(eventName, listener)`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["BaseClient"]]]},{"name":"emit","params":[{"name":"event","optional":false,"type":[[["ClientEventKeyType","<"],["K",">"]]]},{"name":"args","optional":false,"type":[[["ClientEventArgsType","<"],["K",">"]]]}],"returns":[[["boolean"]]],"meta":{"line":55,"file":"BaseClient.ts","path":"src/client"}},{"name":"eventNames","description":"Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or `Symbol`s.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"returns":[[["Array","<"],["string"," | "],["symbol",">"]]]},{"name":"getMaxListeners","description":"Returns the current max listener value for the `EventEmitter` which is either\nset by `emitter.setMaxListeners(n)` or defaults to {@link defaultMaxListeners}.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"returns":[[["number"]]]},{"name":"listenerCount","description":"Returns the number of listeners listening to the event named `eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","description":"The name of the event being listened for","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["number"]]]},{"name":"listeners","description":"Returns a copy of the array of listeners for the event named `eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["Array","<"],["Function",">"]]]},{"name":"off","description":"Alias for `emitter.removeListener()`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["BaseClient"]]]},{"name":"on","params":[{"name":"event","optional":false,"type":[[["ClientEventKeyType","<"],["K",">"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["ClientEventListenerType","<"],["K",">) => "],["void"]]]}],"returns":[[["BaseClient"]]],"meta":{"line":37,"file":"BaseClient.ts","path":"src/client"}},{"name":"once","params":[{"name":"event","optional":false,"type":[[["ClientEventKeyType","<"],["K",">"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["ClientEventListenerType","<"],["K",">) => "],["void"]]]}],"returns":[[["BaseClient"]]],"meta":{"line":46,"file":"BaseClient.ts","path":"src/client"}},{"name":"prependListener","description":"Adds the `listener` function to the _beginning_ of the listeners array for the\nevent named `eventName`. No checks are made to see if the `listener` has\nalready been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\ntimes.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","description":"The name of the event.","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","description":"The callback function","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["BaseClient"]]]},{"name":"prependOnceListener","description":"Adds a **one-time**`listener` function for the event named `eventName` to the_beginning_ of the listeners array. The next time `eventName` is triggered, this\nlistener is removed, and then invoked.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","description":"The name of the event.","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","description":"The callback function","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["BaseClient"]]]},{"name":"rawListeners","description":"Returns a copy of the array of listeners for the event named `eventName`,\nincluding any wrappers (such as those created by `.once()`).","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["Array","<"],["Function",">"]]]},{"name":"removeAllListeners","description":"Removes all listeners, or those of the specified `eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"event","optional":true,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["BaseClient"]]]},{"name":"removeListener","description":"Removes the specified `listener` from the listener array for the event named`eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["BaseClient"]]]},{"name":"setMaxListeners","description":"By default `EventEmitter`s will print a warning if more than `10` listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The `emitter.setMaxListeners()` method allows the limit to be\nmodified for this specific `EventEmitter` instance. The value can be set to`Infinity` (or `0`) to indicate an unlimited number of listeners.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"n","optional":false,"type":[[["number"]]]}],"returns":[[["BaseClient"]]]},{"name":"getEventListeners","description":"Returns a copy of the array of listeners for the event named `eventName`.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"emitter","optional":false,"type":[[["DOMEventTarget"," | "],["EventEmitter"]]]},{"name":"name","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["Array","<"],["Function",">"]]],"meta":{"line":270,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"listenerCount","description":"A class method that returns the number of listeners for the given `eventName`registered on the given `emitter`.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":true,"emits":[],"params":[{"name":"emitter","description":"The emitter to query","optional":false,"type":[[["EventEmitter"]]]},{"name":"eventName","description":"The event name","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["number"]]],"meta":{"line":242,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"on","description":"```js\nconst { on, EventEmitter } = require('events');","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"emitter","optional":false,"type":[[["EventEmitter"]]]},{"name":"eventName","description":"The name of the event being listened for","optional":false,"type":[[["string"]]]},{"name":"options","optional":true,"type":[[["StaticEventEmitterOptions"]]]}],"returns":[[["AsyncIterableIterator","<"],["any",">"]]],"returnsDescription":"that iterates `eventName` events emitted by the `emitter`","meta":{"line":221,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"once","description":"Creates a `Promise` that is fulfilled when the `EventEmitter` emits the given\nevent or that is rejected if the `EventEmitter` emits `'error'` while waiting.\nThe `Promise` will resolve with an array of all the arguments emitted to the\ngiven event.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"emitter","optional":false,"type":[[["NodeEventTarget"]]]},{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"options","optional":true,"type":[[["StaticEventEmitterOptions"]]]}],"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"meta":{"line":157,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"setMaxListeners","description":"By default `EventEmitter`s will print a warning if more than `10` listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The `EventEmitter.setMaxListeners()` method allows the default limit to be\nmodified (if eventTargets is empty) or modify the limit specified in every `EventTarget` | `EventEmitter` passed as arguments.\nThe value can be set to`Infinity` (or `0`) to indicate an unlimited number of listeners.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"n","optional":true,"type":[[["number"]]]},{"name":"eventTargets","optional":false,"type":[[["Array","<"],["DOMEventTarget"," | "],["EventEmitter",">"]]]}],"returns":[[["void"]]],"meta":{"line":290,"file":"events.d.ts","path":"node_modules/@types/node"}}],"meta":{"line":22,"file":"BaseClient.ts","path":"src/client"}},{"name":"BaseManager","description":"The base class for all managers","construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]},{"name":"structureType","description":"The kind of structures this manager stores","optional":false,"type":[[["StructureConstructable","<"],["T",">"]]]}],"returns":[[["BaseManager","<"],["K",", "],["R",", "],["T",">"]]],"meta":{"line":27,"file":"BaseManager.ts","path":"src/managers"}},"props":[{"name":"#holds","description":"The structure that this manager stores in its cache","access":"private","type":[[["StructureConstructable","<"],["T",">"]]],"meta":{"line":21,"file":"BaseManager.ts","path":"src/managers"}},{"name":"cache","description":"The cache of the structures held by this manager","type":[[["Collection","<"],["K",", "],["T",">"]]],"meta":{"line":16,"file":"BaseManager.ts","path":"src/managers"}},{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":11,"file":"BaseManager.ts","path":"src/managers"}}],"methods":[{"name":"resolve","description":"Resolves a structure resolvable to its respective structure.","params":[{"name":"idOrInstance","description":"The ID or instance of the structure held by this manager","optional":false,"type":[[["K"," | "],["R"]]]}],"returns":[[["null"," | "],["T"]]],"meta":{"line":38,"file":"BaseManager.ts","path":"src/managers"}},{"name":"resolveId","description":"Resolves a structure resolvable to its id.","params":[{"name":"idOrInstance","description":"The ID or instance of the strucutre held by this manager","optional":false,"type":[[["K"," | "],["R"]]]}],"returns":[[["null"," | "],["K"]]],"meta":{"line":48,"file":"BaseManager.ts","path":"src/managers"}}],"meta":{"line":7,"file":"BaseManager.ts","path":"src/managers"}},{"name":"BaseRangeBook","extends":["BaseBook"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]},{"name":"options","description":"The options to initialize the book with","optional":false,"type":[[["BaseRangeBookOptions"]]]}],"returns":[[["BaseRangeBook"]]],"meta":{"line":30,"file":"BaseRangeBook.ts","path":"src/books"}},"props":[{"name":"afterTweetId","description":"The book will fetch tweets that were created after this tweet Id","type":[[["null"," | "],["string"]]],"meta":{"line":9,"file":"BaseRangeBook.ts","path":"src/books"}},{"name":"beforeTweetId","description":"The book will fetch tweets that were created before this tweet Id","type":[[["null"," | "],["string"]]],"meta":{"line":14,"file":"BaseRangeBook.ts","path":"src/books"}},{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseBook.ts","path":"src/books"}},{"name":"endTimestamp","description":"The book will fetch tweets that were created at or before this timestamp","type":[[["null"," | "],["number"]]],"meta":{"line":24,"file":"BaseRangeBook.ts","path":"src/books"}},{"name":"hasMore","description":"Whether there are more pages of tweets to be fetched","type":[[["boolean"]]],"meta":{"line":44,"file":"BaseBook.ts","path":"src/books"}},{"name":"maxResultsPerPage","description":"The maximum amount of tweets that will be fetched per page.","type":[[["null"," | "],["number"]]],"meta":{"line":37,"file":"BaseBook.ts","path":"src/books"}},{"name":"startTimestamp","description":"The book will fetch tweets that were created at or after this timestamp","type":[[["null"," | "],["number"]]],"meta":{"line":19,"file":"BaseRangeBook.ts","path":"src/books"}}],"meta":{"line":5,"file":"BaseRangeBook.ts","path":"src/books"}},{"name":"BaseStructure","description":"The base class for all structures","construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]},{"name":"data","description":"The data for the base structure","optional":false,"type":[[["BaseStructureData"]]]}],"returns":[[["BaseStructure"]]],"meta":{"line":21,"file":"BaseStructure.ts","path":"src/structures"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseStructure.ts","path":"src/structures"}},{"name":"id","description":"The unique identifier of the strucutre","type":[[["string"]]],"meta":{"line":15,"file":"BaseStructure.ts","path":"src/structures"}}],"meta":{"line":6,"file":"BaseStructure.ts","path":"src/structures"}},{"name":"BlockedUsersBook","description":"A class for fetching users blocked by the authorized user","extends":["BaseBook"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]},{"name":"options","description":"The options to initialize the book with","optional":false,"type":[[["BlockedUsersBookOptions"]]]}],"returns":[[["BlockedUsersBook"]]],"meta":{"line":22,"file":"BlockedUsersBook.ts","path":"src/books"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseBook.ts","path":"src/books"}},{"name":"hasMore","description":"Whether there are more pages of tweets to be fetched","type":[[["boolean"]]],"meta":{"line":44,"file":"BaseBook.ts","path":"src/books"}},{"name":"maxResultsPerPage","description":"The maximum amount of tweets that will be fetched per page.","type":[[["null"," | "],["number"]]],"meta":{"line":37,"file":"BaseBook.ts","path":"src/books"}},{"name":"userId","description":"The Id of the user this book belongs to","type":[[["string"]]],"meta":{"line":16,"file":"BlockedUsersBook.ts","path":"src/books"}}],"methods":[{"name":"#fetchPages","access":"private","params":[{"name":"token","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"meta":{"line":51,"file":"BlockedUsersBook.ts","path":"src/books"}},{"name":"fetchNextPage","description":"Fetches the next page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"returnsDescription":"A {@link Collection} of {@link User} that have been blocked by the authorized user","meta":{"line":33,"file":"BlockedUsersBook.ts","path":"src/books"}},{"name":"fetchPreviousPage","description":"Fetches the previous page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"returnsDescription":"A {@link Collection} of {@link User} that have been blocked by the authorized user","meta":{"line":46,"file":"BlockedUsersBook.ts","path":"src/books"}}],"meta":{"line":12,"file":"BlockedUsersBook.ts","path":"src/books"}},{"name":"Client","description":"The core class that exposes all the functionalities available in twitter.js","extends":["BaseClient"],"construct":{"name":"constructor","params":[{"name":"options","description":"The options to initialize the client with","optional":true,"type":[[["ClientOptions"]]]}],"returns":[[["Client"]]],"meta":{"line":128,"file":"Client.ts","path":"src/client"}},"props":[{"name":"credentials","description":"The credentials that were provided to the client during login","type":[[["null"," | "],["ClientCredentials"]]],"meta":{"line":85,"file":"Client.ts","path":"src/client"}},{"name":"filteredStreamRules","description":"The manager for {@link FilteredStreamRule} objects","type":[[["FilteredStreamRuleManager"]]],"meta":{"line":123,"file":"Client.ts","path":"src/client"}},{"name":"lists","description":"The manager for {@link List} objects","type":[[["ListManager"]]],"meta":{"line":118,"file":"Client.ts","path":"src/client"}},{"name":"me","description":"The twitter user this client represents","type":[[["null"," | "],["ClientUser"]]],"meta":{"line":92,"file":"Client.ts","path":"src/client"}},{"name":"options","description":"The options passed to the client during initialization","type":[[["ClientOptions"]]],"meta":{"line":26,"file":"BaseClient.ts","path":"src/client"}},{"name":"readyAt","description":"The time at which the client became `ready`","type":[[["null"," | "],["Date"]]],"meta":{"line":73,"file":"Client.ts","path":"src/client"}},{"name":"spaces","description":"The manager for {@link Space} objects","type":[[["SpaceManager"]]],"meta":{"line":113,"file":"Client.ts","path":"src/client"}},{"name":"token","description":"The bearer token that was provided to the client during login","type":[[["null"," | "],["string"]]],"meta":{"line":78,"file":"Client.ts","path":"src/client"}},{"name":"tweets","description":"The manager for {@link Tweet} objects","type":[[["TweetManager"]]],"meta":{"line":103,"file":"Client.ts","path":"src/client"}},{"name":"users","description":"The manager for {@link User} objects","type":[[["UserManager"]]],"meta":{"line":108,"file":"Client.ts","path":"src/client"}},{"name":"captureRejectionSymbol","scope":"static","readonly":true,"type":[[["("],["typeof"," "],["captureRejectionSymbol",")"]]],"meta":{"line":301,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"captureRejections","description":"Sets or gets the default captureRejection value for all emitters.","scope":"static","type":[[["boolean"]]],"meta":{"line":306,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"defaultMaxListeners","scope":"static","type":[[["number"]]],"meta":{"line":307,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"errorMonitor","description":"This symbol shall be used to install a listener for only monitoring `'error'`\nevents. Listeners installed using this symbol are called before the regular\n`'error'` listeners are called.","scope":"static","readonly":true,"type":[[["("],["typeof"," "],["errorMonitor",")"]]],"meta":{"line":300,"file":"events.d.ts","path":"node_modules/@types/node"}}],"methods":[{"name":"#connectToFilteredStream","access":"private","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":235,"file":"Client.ts","path":"src/client"}},{"name":"#connectToSampledStream","access":"private","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":264,"file":"Client.ts","path":"src/client"}},{"name":"#fetchClientUser","access":"private","returns":[[["Promise","<"],["ClientUser",">"]]],"meta":{"line":223,"file":"Client.ts","path":"src/client"}},{"name":"addListener","description":"Alias for `emitter.on(eventName, listener)`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["Client"]]]},{"name":"createBook","description":"Creates book for making paginated requests.","see":[],"examples":["const user = await client.users.fetchByUsername('iShiibi');\nconst composedTweetsBook = client.createBook('ComposedTweetsBook', { user, maxResultsPerPage: 5 });\nconst userTweets = await composedTweetsBook.fetchNextPage();"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"bookName","description":"The name of the book to create","optional":false,"type":[[["K"]]]},{"name":"options","description":"An object containing parameters to initialize the book with","optional":false,"type":[[["CreateBookOptionType","<"],["K",">"]]]}],"returns":[[["CreateBookReturnType","<"],["K",">"]]],"returnsDescription":"An instance of the requested book class","meta":{"line":218,"file":"Client.ts","path":"src/client"}},{"name":"emit","params":[{"name":"event","optional":false,"type":[[["ClientEventKeyType","<"],["K",">"]]]},{"name":"args","optional":false,"type":[[["ClientEventArgsType","<"],["K",">"]]]}],"returns":[[["boolean"]]],"meta":{"line":55,"file":"BaseClient.ts","path":"src/client"}},{"name":"eventNames","description":"Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or `Symbol`s.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"returns":[[["Array","<"],["string"," | "],["symbol",">"]]]},{"name":"getMaxListeners","description":"Returns the current max listener value for the `EventEmitter` which is either\nset by `emitter.setMaxListeners(n)` or defaults to {@link defaultMaxListeners}.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"returns":[[["number"]]]},{"name":"listenerCount","description":"Returns the number of listeners listening to the event named `eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","description":"The name of the event being listened for","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["number"]]]},{"name":"listeners","description":"Returns a copy of the array of listeners for the event named `eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["Array","<"],["Function",">"]]]},{"name":"login","description":"Sets the client ready to make both bearer token and user context authorized API requests.\nEmits a `ready` event on success.","params":[{"name":"credentials","description":"The credentials for the client","optional":false,"type":[[["ClientCredentialsInterface"]]]}],"returns":[[["Promise","<"],["ClientCredentials",">"]]],"returnsDescription":"The provided credentials","meta":{"line":186,"file":"Client.ts","path":"src/client"}},{"name":"loginWithBearerToken","description":"Sets the client ready to make bearer token authorized API requests.\nEmits a `ready` event on success.","params":[{"name":"token","description":"The bearer token for the client","optional":false,"type":[[["string"]]]}],"returns":[[["Promise","<"],["string",">"]]],"returnsDescription":"The provided bearer token","meta":{"line":163,"file":"Client.ts","path":"src/client"}},{"name":"off","description":"Alias for `emitter.removeListener()`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["Client"]]]},{"name":"on","params":[{"name":"event","optional":false,"type":[[["ClientEventKeyType","<"],["K",">"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["ClientEventListenerType","<"],["K",">) => "],["void"]]]}],"returns":[[["Client"]]],"meta":{"line":37,"file":"BaseClient.ts","path":"src/client"}},{"name":"once","params":[{"name":"event","optional":false,"type":[[["ClientEventKeyType","<"],["K",">"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["ClientEventListenerType","<"],["K",">) => "],["void"]]]}],"returns":[[["Client"]]],"meta":{"line":46,"file":"BaseClient.ts","path":"src/client"}},{"name":"prependListener","description":"Adds the `listener` function to the _beginning_ of the listeners array for the\nevent named `eventName`. No checks are made to see if the `listener` has\nalready been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\ntimes.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","description":"The name of the event.","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","description":"The callback function","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["Client"]]]},{"name":"prependOnceListener","description":"Adds a **one-time**`listener` function for the event named `eventName` to the_beginning_ of the listeners array. The next time `eventName` is triggered, this\nlistener is removed, and then invoked.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","description":"The name of the event.","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","description":"The callback function","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["Client"]]]},{"name":"rawListeners","description":"Returns a copy of the array of listeners for the event named `eventName`,\nincluding any wrappers (such as those created by `.once()`).","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["Array","<"],["Function",">"]]]},{"name":"removeAllListeners","description":"Removes all listeners, or those of the specified `eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"event","optional":true,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["Client"]]]},{"name":"removeListener","description":"Removes the specified `listener` from the listener array for the event named`eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["Client"]]]},{"name":"setMaxListeners","description":"By default `EventEmitter`s will print a warning if more than `10` listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The `emitter.setMaxListeners()` method allows the limit to be\nmodified for this specific `EventEmitter` instance. The value can be set to`Infinity` (or `0`) to indicate an unlimited number of listeners.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"n","optional":false,"type":[[["number"]]]}],"returns":[[["Client"]]]},{"name":"getEventListeners","description":"Returns a copy of the array of listeners for the event named `eventName`.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"emitter","optional":false,"type":[[["DOMEventTarget"," | "],["EventEmitter"]]]},{"name":"name","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["Array","<"],["Function",">"]]],"meta":{"line":270,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"listenerCount","description":"A class method that returns the number of listeners for the given `eventName`registered on the given `emitter`.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":true,"emits":[],"params":[{"name":"emitter","description":"The emitter to query","optional":false,"type":[[["EventEmitter"]]]},{"name":"eventName","description":"The event name","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["number"]]],"meta":{"line":242,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"on","description":"```js\nconst { on, EventEmitter } = require('events');","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"emitter","optional":false,"type":[[["EventEmitter"]]]},{"name":"eventName","description":"The name of the event being listened for","optional":false,"type":[[["string"]]]},{"name":"options","optional":true,"type":[[["StaticEventEmitterOptions"]]]}],"returns":[[["AsyncIterableIterator","<"],["any",">"]]],"returnsDescription":"that iterates `eventName` events emitted by the `emitter`","meta":{"line":221,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"once","description":"Creates a `Promise` that is fulfilled when the `EventEmitter` emits the given\nevent or that is rejected if the `EventEmitter` emits `'error'` while waiting.\nThe `Promise` will resolve with an array of all the arguments emitted to the\ngiven event.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"emitter","optional":false,"type":[[["NodeEventTarget"]]]},{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"options","optional":true,"type":[[["StaticEventEmitterOptions"]]]}],"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"meta":{"line":157,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"setMaxListeners","description":"By default `EventEmitter`s will print a warning if more than `10` listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The `EventEmitter.setMaxListeners()` method allows the default limit to be\nmodified (if eventTargets is empty) or modify the limit specified in every `EventTarget` | `EventEmitter` passed as arguments.\nThe value can be set to`Infinity` (or `0`) to indicate an unlimited number of listeners.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"n","optional":true,"type":[[["number"]]]},{"name":"eventTargets","optional":false,"type":[[["Array","<"],["DOMEventTarget"," | "],["EventEmitter",">"]]]}],"returns":[[["void"]]],"meta":{"line":290,"file":"events.d.ts","path":"node_modules/@types/node"}}],"meta":{"line":69,"file":"Client.ts","path":"src/client"}},{"name":"ClientCredentials","construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["ClientCredentialsInterface"]]]}],"returns":[[["ClientCredentials"]]],"meta":{"line":174,"file":"Miscellaneous.ts","path":"src/structures/misc"}},"props":[{"name":"accessToken","type":[[["string"]]],"meta":{"line":170,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"accessTokenSecret","type":[[["string"]]],"meta":{"line":171,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"bearerToken","type":[[["string"]]],"meta":{"line":172,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"consumerKey","type":[[["string"]]],"meta":{"line":168,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"consumerSecret","type":[[["string"]]],"meta":{"line":169,"file":"Miscellaneous.ts","path":"src/structures/misc"}}],"methods":[{"name":"#validate","access":"private","params":[{"name":"__namedParameters","optional":false,"type":[[["ClientCredentialsInterface"]]]}],"returns":[[["void"]]],"meta":{"line":183,"file":"Miscellaneous.ts","path":"src/structures/misc"}}],"meta":{"line":167,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"ClientUser","extends":["User"],"construct":{"name":"constructor","params":[{"name":"client","optional":false,"type":[[["Client"]]]},{"name":"data","optional":false,"type":[[["SingleUserLookupResponse"]]]}],"returns":[[["ClientUser"]]],"meta":{"line":6,"file":"ClientUser.ts","path":"src/structures"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseStructure.ts","path":"src/structures"}},{"name":"createdAt","description":"The UTC datetime that the user account was created on Twitter","type":[[["null"," | "],["Date"]]],"meta":{"line":34,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"description","description":"The text of this user's profile description (also known as bio), if the user provided one","type":[[["null"," | "],["string"]]],"meta":{"line":39,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"entities","description":"Contains details about text that has a special meaning in the user's description","type":[[["null"," | "],["UserEntities"]]],"meta":{"line":44,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"id","description":"The unique identifier of the strucutre","type":[[["string"]]],"meta":{"line":15,"file":"BaseStructure.ts","path":"src/structures"}},{"name":"location","description":"The location specified in the user's profile, if the user provided one. As this is a freeform value,\nit may not indicate a valid location, but it may be fuzzily evaluated when performing searches with\nlocation queries","type":[[["null"," | "],["string"]]],"meta":{"line":51,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"name","description":"The name of the user, as they’ve defined it on their profile. Not necessarily a person’s name.\nTypically capped at `50` characters, but subject to change","type":[[["string"]]],"meta":{"line":22,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"pinnedTweet","description":"The tweet pinned by this user","type":[[["null"," | "],["SimplifiedTweet"]]],"meta":{"line":13,"file":"User.ts","path":"src/structures"}},{"name":"pinnedTweetId","description":"The unique identifier of this user's pinned Tweet","type":[[["null"," | "],["string"]]],"meta":{"line":56,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"profileImageURL","description":"The URL to the profile image for this user, as shown on the user's profile","type":[[["null"," | "],["string"]]],"meta":{"line":61,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"protected","description":"Indicates if this user has chosen to protect their Tweets (in other words, if this user's Tweets are private)","type":[[["null"," | "],["boolean"]]],"meta":{"line":66,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"publicMetrics","description":"Contains details about activity for this user","type":[[["null"," | "],["UserPublicMetrics"]]],"meta":{"line":71,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"url","description":"The URL specified in the user's profile, if present","type":[[["null"," | "],["string"]]],"meta":{"line":76,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"username","description":"The Twitter screen name, handle, or alias that this user identifies themselves with. Usernames are unique but\nsubject to change. Typically a maximum of `15` characters long, but some historical accounts may exist with longer\nnames","type":[[["string"]]],"meta":{"line":29,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"verified","description":"Indicates if this user is a verified Twitter User","type":[[["null"," | "],["boolean"]]],"meta":{"line":81,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"withheld","description":"Contains withholding details for withheld content, if applicable","type":[[["null"," | "],["UserWitheld"]]],"meta":{"line":86,"file":"SimplifiedUser.ts","path":"src/structures"}}],"methods":[{"name":"#patchPinnedTweet","access":"private","params":[{"name":"tweets","optional":true,"type":[[["Array","<"],["APITweet",">"]]]}],"returns":[[["undefined"," | "],["SimplifiedTweet"]]],"meta":{"line":21,"file":"User.ts","path":"src/structures"}},{"name":"block","description":"Blocks this user on twitter.","returns":[[["Promise","<{"],["\nblocking",": "],["boolean\n","}>"]]],"meta":{"line":123,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"follow","description":"Follows this user on twitter.","returns":[[["Promise","<{"],["\nfollowing",": "],["boolean",","],["\npending","_"],["follow",": "],["boolean\n","}>"]]],"meta":{"line":109,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"mute","description":"Mutes this user on twitter.","returns":[[["Promise","<{"],["\nmuting",": "],["boolean\n","}>"]]],"meta":{"line":137,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"unblock","description":"Unblocks this user on twitter.","returns":[[["Promise","<{"],["\nblocking",": "],["boolean\n","}>"]]],"meta":{"line":130,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"unfollow","description":"Unfollows this user on twitter.","returns":[[["Promise","<{"],["\nfollowing",": "],["boolean\n","}>"]]],"meta":{"line":116,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"unmute","description":"Unmutes this user on twitter.","returns":[[["Promise","<{"],["\nmuting",": "],["boolean\n","}>"]]],"meta":{"line":144,"file":"SimplifiedUser.ts","path":"src/structures"}}],"meta":{"line":5,"file":"ClientUser.ts","path":"src/structures"}},{"name":"Collection","description":"The data structure for storing objects mapped by their unique identifier property","extends":["Collection<K, V>"],"construct":{"name":"constructor","params":[{"name":"entries","optional":true,"type":[[["null"," | "],["readonly"," "],["Array","<"],["readonly"," ["],["K",", "],["V","]>"]]]}],"returns":[[["Collection","<"],["K",", "],["V",">"]]]},"props":[{"name":"[toStringTag]","readonly":true,"type":[[["string"]]],"meta":{"line":135,"file":"lib.es2015.symbol.wellknown.d.ts","path":"node_modules/typescript/lib"}},{"name":"constructor","type":[[["CollectionConstructor"]]],"meta":{"line":21,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"size","readonly":true,"type":[[["number"]]],"meta":{"line":28,"file":"lib.es2015.collection.d.ts","path":"node_modules/typescript/lib"}},{"name":"[species]","scope":"static","readonly":true,"type":[[["MapConstructor"]]],"meta":{"line":317,"file":"lib.es2015.symbol.wellknown.d.ts","path":"node_modules/typescript/lib"}},{"name":"default","scope":"static","readonly":true,"type":[[["("],["typeof"," "],["Collection",")"]]],"meta":{"line":28,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}}],"methods":[{"name":"[iterator]","description":"Returns an iterable of entries in the map.","returns":[[["IterableIterator","<["],["K",", "],["V","]>"]]]},{"name":"at","description":"Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\nReturns the item at a given index, allowing for positive and negative integers.\nNegative integers count back from the last item in the collection.","params":[{"name":"index","description":"The index of the element to obtain","optional":false,"type":[[["number"]]]}],"returns":[[["undefined"," | "],["V"]]],"meta":{"line":101,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"clear","returns":[[["void"]]]},{"name":"clone","description":"Creates an identical shallow copy of this collection.","see":[],"examples":["const newColl = someColl.clone();"],"abstract":false,"deprecated":false,"emits":[],"returns":[[["Collection","<"],["K",", "],["V",">"]]],"meta":{"line":320,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"concat","description":"Combines this collection with others into a new collection. None of the source collections are modified.","see":[],"examples":["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"collections","description":"Collections to merge","optional":false,"type":[[["Array","<"],["ReadonlyCollection","<"],["K",", "],["V",">>"]]]}],"returns":[[["Collection","<"],["K",", "],["V",">"]]],"meta":{"line":329,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"delete","params":[{"name":"key","optional":false,"type":[[["K"]]]}],"returns":[[["boolean"]]]},{"name":"difference","description":"The difference method returns a new structure containing items where the key is present in one of the original structures but not the other.","params":[{"name":"other","description":"The other Collection to filter against","optional":false,"type":[[["ReadonlyCollection","<"],["K",", "],["T",">"]]]}],"returns":[[["Collection","<"],["K",", "],["V"," | "],["T",">"]]],"meta":{"line":363,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"each","description":"Identical to\n[Map.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach),\nbut returns the collection instead of undefined.","see":[],"examples":["collection\n .each(user => console.log(user.username))\n .filter(user => user.bot)\n .each(user => console.log(user.username));"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function to execute for each element","optional":false,"type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["Collection","<"],["K",", "],["V",">) => "],["void"]]]}],"returns":[[["Collection","<"],["K",", "],["V",">"]]],"meta":{"line":298,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"ensure","description":"Obtains the value of the given key if it exists, otherwise sets and returns the value provided by the default value generator.","see":[],"examples":["collection.ensure(guildId, () => defaultGuildConfig);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"key","description":"The key to get if it exists, or set otherwise","optional":false,"type":[[["K"]]]},{"name":"defaultValueGenerator","description":"A function that generates the default value","optional":false,"type":[[["("],["key",": "],["K",", "],["collection",": "],["Collection","<"],["K",", "],["V",">) => "],["V"]]]}],"returns":[[["V"]]],"meta":{"line":38,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"entries","description":"Returns an iterable of key, value pairs for every entry in the map.","returns":[[["IterableIterator","<["],["K",", "],["V","]>"]]]},{"name":"equals","description":"Checks if this collection shares identical items with another.\nThis is different to checking for equality using equal-signs, because\nthe collections may be different objects, but contain the same data.","params":[{"name":"collection","description":"Collection to compare with","optional":false,"type":[[["ReadonlyCollection","<"],["K",", "],["V",">"]]]}],"returns":[[["boolean"]]],"returnsDescription":"Whether the collections have identical contents","meta":{"line":339,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"every","description":"Checks if all items passes a test. Identical in behavior to\n[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).","see":[],"examples":["collection.every(user => !user.bot);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function used to test (should return a boolean)","optional":false,"type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["Collection","<"],["K",", "],["V",">) => "],["key"," "],["is"," "],["K2"]]]}],"returns":[[["this"," "],["is"," "],["Collection","<"],["K2",", "],["V",">"]]],"meta":{"line":266,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"filter","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\nbut returns a Collection instead of an Array.","see":[],"examples":["collection.filter(user => user.username === 'Bob');"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"The function to test with (should return boolean)","optional":false,"type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["Collection","<"],["K",", "],["V",">) => "],["key"," "],["is"," "],["K2"]]]}],"returns":[[["Collection","<"],["K2",", "],["V",">"]]],"meta":{"line":186,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"find","description":"Searches for a single item where the given function returns a truthy value. This behaves like\n[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n<warn>All collections used in Discord.js are mapped using their `id` property, and if you want to find by id you\nshould use the `get` method. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>","see":[],"examples":["collection.find(user => user.username === 'Bob');"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"The function to test with (should return boolean)","optional":false,"type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["Collection","<"],["K",", "],["V",">) => "],["value"," "],["is"," "],["V2"]]]}],"returns":[[["undefined"," | "],["V2"]]],"meta":{"line":146,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"findKey","description":"Searches for the key of a single item where the given function returns a truthy value. This behaves like\n[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex),\nbut returns the key rather than the positional index.","see":[],"examples":["collection.findKey(user => user.username === 'Bob');"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"The function to test with (should return boolean)","optional":false,"type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["Collection","<"],["K",", "],["V",">) => "],["key"," "],["is"," "],["K2"]]]}],"returns":[[["undefined"," | "],["K2"]]],"meta":{"line":161,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"first","description":"Obtains the first value(s) in this collection.","returns":[[["undefined"," | "],["V"]]],"returnsDescription":"A single value if no amount is provided or an array of values, starting from the end if amount is negative","meta":{"line":62,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"firstKey","description":"Obtains the first key(s) in this collection.","returns":[[["undefined"," | "],["K"]]],"returnsDescription":"A single key if no amount is provided or an array of keys, starting from the end if\namount is negative","meta":{"line":72,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"flatMap","description":"Maps each item into a Collection, then joins the results into a single Collection. Identical in behavior to\n[Array.flatMap()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap).","see":[],"examples":["collection.flatMap(guild => guild.members.cache);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function that produces a new Collection","optional":false,"type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["Collection","<"],["K",", "],["V",">) => "],["Collection","<"],["K",", "],["T",">"]]]}],"returns":[[["Collection","<"],["K",", "],["T",">"]]],"meta":{"line":218,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"forEach","params":[{"name":"callbackfn","optional":false,"type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["map",": "],["Map","<"],["K",", "],["V",">) => "],["void"]]]},{"name":"thisArg","optional":true,"type":[[["any"]]]}],"returns":[[["void"]]]},{"name":"get","params":[{"name":"key","optional":false,"type":[[["K"]]]}],"returns":[[["undefined"," | "],["V"]]]},{"name":"has","params":[{"name":"key","optional":false,"type":[[["K"]]]}],"returns":[[["boolean"]]]},{"name":"hasAll","description":"Checks if all of the elements exist in the collection.","params":[{"name":"keys","description":"The keys of the elements to check for","optional":false,"type":[[["Array","<"],["K",">"]]]}],"returns":[[["boolean"]]],"returnsDescription":"`true` if all of the elements exist, `false` if at least one does not exist.","meta":{"line":46,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"hasAny","description":"Checks if any of the elements exist in the collection.","params":[{"name":"keys","description":"The keys of the elements to check for","optional":false,"type":[[["Array","<"],["K",">"]]]}],"returns":[[["boolean"]]],"returnsDescription":"`true` if any of the elements exist, `false` if none exist.","meta":{"line":54,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"intersect","description":"The intersect method returns a new structure containing items where the keys and values are present in both original structures.","params":[{"name":"other","description":"The other Collection to filter against","optional":false,"type":[[["ReadonlyCollection","<"],["K",", "],["T",">"]]]}],"returns":[[["Collection","<"],["K",", "],["T",">"]]],"meta":{"line":357,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"keyAt","description":"Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\nReturns the key at a given index, allowing for positive and negative integers.\nNegative integers count back from the last item in the collection.","params":[{"name":"index","description":"The index of the key to obtain","optional":false,"type":[[["number"]]]}],"returns":[[["undefined"," | "],["K"]]],"meta":{"line":109,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"keys","description":"Returns an iterable of keys in the map","returns":[[["IterableIterator","<"],["K",">"]]]},{"name":"last","description":"Obtains the last value(s) in this collection.","returns":[[["undefined"," | "],["V"]]],"returnsDescription":"A single value if no amount is provided or an array of values, starting from the start if\namount is negative","meta":{"line":82,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"lastKey","description":"Obtains the last key(s) in this collection.","returns":[[["undefined"," | "],["K"]]],"returnsDescription":"A single key if no amount is provided or an array of keys, starting from the start if\namount is negative","meta":{"line":92,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"map","description":"Maps each item to another value into an array. Identical in behavior to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","see":[],"examples":["collection.map(user => user.tag);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function that produces an element of the new array, taking three arguments","optional":false,"type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["Collection","<"],["K",", "],["V",">) => "],["T"]]]}],"returns":[[["Array","<"],["T",">"]]],"meta":{"line":230,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"mapValues","description":"Maps each item to another value into a collection. Identical in behavior to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","see":[],"examples":["collection.mapValues(user => user.tag);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function that produces an element of the new collection, taking three arguments","optional":false,"type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["Collection","<"],["K",", "],["V",">) => "],["T"]]]}],"returns":[[["Collection","<"],["K",", "],["T",">"]]],"meta":{"line":242,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"partition","description":"Partitions the collection into two collections where the first collection\ncontains the items that passed and the second contains the items that failed.","see":[],"examples":["const [big, small] = collection.partition(guild => guild.memberCount > 250);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function used to test (should return a boolean)","optional":false,"type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["Collection","<"],["K",", "],["V",">) => "],["key"," "],["is"," "],["K2"]]]}],"returns":[[["["],["Collection","<"],["K2",", "],["V",">, "],["Collection","<"],["Exclude","<"],["K",", "],["K2",">, "],["V",">]"]]],"meta":{"line":202,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"random","description":"Obtains unique random value(s) from this collection.","returns":[[["undefined"," | "],["V"]]],"returnsDescription":"A single value if no amount is provided or an array of values","meta":{"line":117,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"randomKey","description":"Obtains unique random key(s) from this collection.","returns":[[["undefined"," | "],["K"]]],"returnsDescription":"A single key if no amount is provided or an array","meta":{"line":126,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"reduce","description":"Applies a function to produce a single value. Identical in behavior to\n[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).","see":[],"examples":["collection.reduce((acc, guild) => acc + guild.memberCount, 0);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\nand `collection`","optional":false,"type":[[["("],["accumulator",": "],["T",", "],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["Collection","<"],["K",", "],["V",">) => "],["T"]]]},{"name":"initialValue","description":"Starting value for the accumulator","optional":true,"type":[[["T"]]]}],"returns":[[["T"]]],"meta":{"line":283,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"reverse","description":"Identical to [Array.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse)\nbut returns a Collection instead of an Array.","returns":[[["Collection","<"],["K",", "],["V",">"]]],"meta":{"line":132,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"set","params":[{"name":"key","optional":false,"type":[[["K"]]]},{"name":"value","optional":false,"type":[[["V"]]]}],"returns":[[["Collection","<"],["K",", "],["V",">"]]]},{"name":"some","description":"Checks if there exists an item that passes a test. Identical in behavior to\n[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).","see":[],"examples":["collection.some(user => user.discriminator === '0000');"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function used to test (should return a boolean)","optional":false,"type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["Collection","<"],["K",", "],["V",">) => "],["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":254,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"sort","description":"The sort method sorts the items of a collection in place and returns it.\nThe sort is not necessarily stable in Node 10 or older.\nThe default sort order is according to string Unicode code points.","see":[],"examples":["collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"compareFunction","description":"Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value, according to the string conversion of each element.","optional":true,"type":[[["Comparator","<"],["K",", "],["V",">"]]]}],"returns":[[["Collection","<"],["K",", "],["V",">"]]],"meta":{"line":351,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"sorted","description":"The sorted method sorts the items of a collection and returns it.\nThe sort is not necessarily stable in Node 10 or older.\nThe default sort order is according to string Unicode code points.","see":[],"examples":["collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"compareFunction","description":"Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value,\naccording to the string conversion of each element.","optional":true,"type":[[["Comparator","<"],["K",", "],["V",">"]]]}],"returns":[[["Collection","<"],["K",", "],["V",">"]]],"meta":{"line":376,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"sweep","description":"Removes items that satisfy the provided filter function.","params":[{"name":"fn","description":"Function used to test (should return a boolean)","optional":false,"type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["Collection","<"],["K",", "],["V",">) => "],["boolean"]]]}],"returns":[[["number"]]],"returnsDescription":"The number of removed entries","meta":{"line":173,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"tap","description":"Runs a function on the collection and returns the collection.","see":[],"examples":["collection\n .tap(coll => console.log(coll.size))\n .filter(user => user.bot)\n .tap(coll => console.log(coll.size))"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function to execute","optional":false,"type":[[["("],["collection",": "],["Collection","<"],["K",", "],["V",">) => "],["void"]]]}],"returns":[[["Collection","<"],["K",", "],["V",">"]]],"meta":{"line":312,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"toJSON","returns":[[["Array","<"],["V",">"]]],"meta":{"line":377,"file":"index.d.ts","path":"node_modules/@discordjs/collection/dist"}},{"name":"values","description":"Returns an iterable of values in the map","returns":[[["IterableIterator","<"],["V",">"]]]}],"meta":{"line":6,"file":"Collection.ts","path":"src/util"}},{"name":"ComposedTweetsBook","description":"A class for fetching tweets composed by a twitter user","extends":["BaseRangeBook"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]},{"name":"options","description":"The options to initialize the book with","optional":false,"type":[[["ComposedTweetsBookOptions"]]]}],"returns":[[["ComposedTweetsBook"]]],"meta":{"line":27,"file":"ComposedTweetsBook.ts","path":"src/books"}},"props":[{"name":"afterTweetId","description":"The book will fetch tweets that were created after this tweet Id","type":[[["null"," | "],["string"]]],"meta":{"line":9,"file":"BaseRangeBook.ts","path":"src/books"}},{"name":"beforeTweetId","description":"The book will fetch tweets that were created before this tweet Id","type":[[["null"," | "],["string"]]],"meta":{"line":14,"file":"BaseRangeBook.ts","path":"src/books"}},{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseBook.ts","path":"src/books"}},{"name":"endTimestamp","description":"The book will fetch tweets that were created at or before this timestamp","type":[[["null"," | "],["number"]]],"meta":{"line":24,"file":"BaseRangeBook.ts","path":"src/books"}},{"name":"exclude","description":"The types of tweets that the book should **not** fetch","type":[[["undefined"," | "],["null"," | "],["Array","<"],["'retweets'"," | "],["'replies'",">"]]],"meta":{"line":21,"file":"ComposedTweetsBook.ts","path":"src/books"}},{"name":"hasMore","description":"Whether there are more pages of tweets to be fetched","type":[[["boolean"]]],"meta":{"line":44,"file":"BaseBook.ts","path":"src/books"}},{"name":"maxResultsPerPage","description":"The maximum amount of tweets that will be fetched per page.","type":[[["null"," | "],["number"]]],"meta":{"line":37,"file":"BaseBook.ts","path":"src/books"}},{"name":"startTimestamp","description":"The book will fetch tweets that were created at or after this timestamp","type":[[["null"," | "],["number"]]],"meta":{"line":19,"file":"BaseRangeBook.ts","path":"src/books"}},{"name":"userId","description":"The Id of the user this book belongs to","type":[[["string"]]],"meta":{"line":16,"file":"ComposedTweetsBook.ts","path":"src/books"}}],"methods":[{"name":"#fetchPages","access":"private","params":[{"name":"token","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Tweet",">>"]]],"meta":{"line":57,"file":"ComposedTweetsBook.ts","path":"src/books"}},{"name":"fetchNextPage","description":"Fetches the next page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["Tweet",">>"]]],"returnsDescription":"A {@link Collection} of {@link Tweet} composed by the user","meta":{"line":39,"file":"ComposedTweetsBook.ts","path":"src/books"}},{"name":"fetchPreviousPage","description":"Fetches the previous page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["Tweet",">>"]]],"returnsDescription":"A {@link Collection} of {@link Tweet} composed by the user","meta":{"line":52,"file":"ComposedTweetsBook.ts","path":"src/books"}}],"meta":{"line":12,"file":"ComposedTweetsBook.ts","path":"src/books"}},{"name":"FilteredStreamRule","extends":["BaseStructure"],"construct":{"name":"constructor","params":[{"name":"client","optional":false,"type":[[["Client"]]]},{"name":"data","optional":false,"type":[[["APIFilteredTweetStreamRule"]]]}],"returns":[[["FilteredStreamRule"]]],"meta":{"line":13,"file":"FilteredStreamRule.ts","path":"src/structures"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseStructure.ts","path":"src/structures"}},{"name":"id","description":"The unique identifier of the strucutre","type":[[["string"]]],"meta":{"line":15,"file":"BaseStructure.ts","path":"src/structures"}},{"name":"tag","type":[[["null"," | "],["string"]]],"meta":{"line":6,"file":"FilteredStreamRule.ts","path":"src/structures"}},{"name":"value","description":"The value of the rule","type":[[["string"]]],"meta":{"line":11,"file":"FilteredStreamRule.ts","path":"src/structures"}}],"meta":{"line":5,"file":"FilteredStreamRule.ts","path":"src/structures"}},{"name":"FilteredStreamRuleManager","extends":["BaseManager<string, FilteredStreamRuleResolvable, FilteredStreamRule>"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]}],"returns":[[["FilteredStreamRuleManager"]]],"meta":{"line":17,"file":"FilteredStreamRuleManager.ts","path":"src/managers"}},"props":[{"name":"#holds","description":"The structure that this manager stores in its cache","access":"private","type":[[["StructureConstructable","<"],["FilteredStreamRule",">"]]],"meta":{"line":21,"file":"BaseManager.ts","path":"src/managers"}},{"name":"cache","description":"The cache of the structures held by this manager","type":[[["Collection","<"],["string",", "],["FilteredStreamRule",">"]]],"meta":{"line":16,"file":"BaseManager.ts","path":"src/managers"}},{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":11,"file":"BaseManager.ts","path":"src/managers"}}],"methods":[{"name":"#deleteRules","description":"Deletes one or more filtered stream rules.","access":"private","params":[{"name":"body","description":"The request body","optional":false,"type":[[["Without","<"],["AddFilteredTweetStreamRulesJSONBody",", "],["RemoveFilteredTweetStreamRulesJSONBody","> & "],["RemoveFilteredTweetStreamRulesJSONBody"," | "],["Without","<"],["RemoveFilteredTweetStreamRulesJSONBody",", "],["AddFilteredTweetStreamRulesJSONBody","> & "],["AddFilteredTweetStreamRulesJSONBody"]]]}],"returns":[[["Promise","<"],["Without","<{"],["\ndata",": "],["Array","<{"],["\nid",": "],["string",","],["\ntag",": "],["string",","],["\nvalue",": "],["string\n","}>,"],["\nmeta",": "],["AddFilteredTweetStreamRulesResponseMeta\n","}, {"],["\nmeta",": "],["RemoveFilteredTweetStreamRulesResponseMeta\n","}> & {"],["\nmeta",": "],["RemoveFilteredTweetStreamRulesResponseMeta\n","} | "],["Without","<{"],["\nmeta",": "],["RemoveFilteredTweetStreamRulesResponseMeta\n","}, {"],["\ndata",": "],["Array","<{"],["\nid",": "],["string",","],["\ntag",": "],["string",","],["\nvalue",": "],["string\n","}>,"],["\nmeta",": "],["AddFilteredTweetStreamRulesResponseMeta\n","}> & {"],["\ndata",": "],["Array","<{"],["\nid",": "],["string",","],["\ntag",": "],["string",","],["\nvalue",": "],["string\n","}>,"],["\nmeta",": "],["AddFilteredTweetStreamRulesResponseMeta\n","}>"]]],"returnsDescription":"// TODO","meta":{"line":137,"file":"FilteredStreamRuleManager.ts","path":"src/managers"}},{"name":"#fetchMultipleRulesByIds","description":"Fetches multiple rules by using their ids or all rules if `ruleIds` is an empty array.","access":"private","params":[{"name":"ruleIds","description":"The ids of the rules to fetch or an empty array","optional":false,"type":[[["Array","<"],["string",">"]]]},{"name":"options","description":"An object containing optional parameters to apply","optional":true,"type":[[["FetchFilteredStreamRulesOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["FilteredStreamRule",">>"]]],"returnsDescription":"A {@link Collection} of {@link FilteredStreamRule}","meta":{"line":172,"file":"FilteredStreamRuleManager.ts","path":"src/managers"}},{"name":"#fetchSingleRuleById","description":"Fetches a single rule by using its id.","access":"private","params":[{"name":"ruleId","description":"The id of the rule to fetch","optional":false,"type":[[["string"]]]},{"name":"options","description":"An object containing optional parameters to apply","optional":true,"type":[[["BaseFetchOptions"]]]}],"returns":[[["Promise","<"],["FilteredStreamRule",">"]]],"returnsDescription":"A {@link FilteredStreamRule}","meta":{"line":151,"file":"FilteredStreamRuleManager.ts","path":"src/managers"}},{"name":"create","description":"Creates one or more rules for the filtered stream.","see":[],"examples":["// Create a single rule\nconst rule = await client.filteredStreamRules.create({ value: '@iShiibi', tag: 'Tweets mentioning the user iShiibi' });\n\n// Create multiple rules\nconst rules = await client.filteredStreamRules.create([\n{ value: 'from:iShiibi', tag: 'Tweets created by the user iShiibi' },\n{ value: 'to:TwitterAPI', tag: 'Tweets that are replies to tweets created by the user TwitterAPI' },\n]);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"data","description":"The data for creating one or more rules","optional":false,"type":[[["FilteredStreamRuleData"," | "],["Array","<"],["FilteredStreamRuleData",">"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["FilteredStreamRule",">>"]]],"returnsDescription":"A {@link Collection} of {@link FilteredStreamRule}","meta":{"line":73,"file":"FilteredStreamRuleManager.ts","path":"src/managers"}},{"name":"deleteById","description":"Deletes one or more filtered stream rules using their ids.","see":[],"examples":["// Delete a single rule\nconst data = await client.filteredStreamRules.deleteById('1488053806785245187');\n\n// Delete multiple rules\nconst data = await client.filteredStreamRules.deleteById(['1488048453506957314', '1488053806785245186']);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"ruleIdOrIds","description":"The id or ids of the rules to delete","optional":false,"type":[[["string"," | "],["Array","<"],["string",">"]]]}],"returns":[[["Promise","<"],["Without","<{"],["\ndata",": "],["Array","<{"],["\nid",": "],["string",","],["\ntag",": "],["string",","],["\nvalue",": "],["string\n","}>,"],["\nmeta",": "],["AddFilteredTweetStreamRulesResponseMeta\n","}, {"],["\nmeta",": "],["RemoveFilteredTweetStreamRulesResponseMeta\n","}> & {"],["\nmeta",": "],["RemoveFilteredTweetStreamRulesResponseMeta\n","} | "],["Without","<{"],["\nmeta",": "],["RemoveFilteredTweetStreamRulesResponseMeta\n","}, {"],["\ndata",": "],["Array","<{"],["\nid",": "],["string",","],["\ntag",": "],["string",","],["\nvalue",": "],["string\n","}>,"],["\nmeta",": "],["AddFilteredTweetStreamRulesResponseMeta\n","}> & {"],["\ndata",": "],["Array","<{"],["\nid",": "],["string",","],["\ntag",": "],["string",","],["\nvalue",": "],["string\n","}>,"],["\nmeta",": "],["AddFilteredTweetStreamRulesResponseMeta\n","}>"]]],"meta":{"line":102,"file":"FilteredStreamRuleManager.ts","path":"src/managers"}},{"name":"deleteByValue","description":"Deletes one or more filtered stream rules using their values.","see":[],"examples":["// Delete a single rule\nconst data = await client.filteredStreamRules.deleteByValue('@iShiibi');\n\n// Delete multiple rules\nconst data = await client.filteredStreamRules.deleteByValue(['from:iShiibi', 'to:TwitterAPI']);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"ruleValueOrValues","description":"The value or values of the rules to delete","optional":false,"type":[[["string"," | "],["Array","<"],["string",">"]]]}],"returns":[[["Promise","<"],["Without","<{"],["\ndata",": "],["Array","<{"],["\nid",": "],["string",","],["\ntag",": "],["string",","],["\nvalue",": "],["string\n","}>,"],["\nmeta",": "],["AddFilteredTweetStreamRulesResponseMeta\n","}, {"],["\nmeta",": "],["RemoveFilteredTweetStreamRulesResponseMeta\n","}> & {"],["\nmeta",": "],["RemoveFilteredTweetStreamRulesResponseMeta\n","} | "],["Without","<{"],["\nmeta",": "],["RemoveFilteredTweetStreamRulesResponseMeta\n","}, {"],["\ndata",": "],["Array","<{"],["\nid",": "],["string",","],["\ntag",": "],["string",","],["\nvalue",": "],["string\n","}>,"],["\nmeta",": "],["AddFilteredTweetStreamRulesResponseMeta\n","}> & {"],["\ndata",": "],["Array","<{"],["\nid",": "],["string",","],["\ntag",": "],["string",","],["\nvalue",": "],["string\n","}>,"],["\nmeta",": "],["AddFilteredTweetStreamRulesResponseMeta\n","}>"]]],"meta":{"line":122,"file":"FilteredStreamRuleManager.ts","path":"src/managers"}},{"name":"fetch","description":"Fetches one or multiple rules that are currently active. Fetches all active rules if `rulesOrRules` is an empty array.","see":[],"examples":["// Fetch a single active rule\nconst rule = await client.filteredStreamRules.fetch('1459555165208338435');\n\n// Fetch multiple active rules\nconst rules = await client.filteredStreamRules.fetch(['1459555165208338435', '1488046998351925250']);\n\n// Fetch all active rules\nconst rules = await client.filteredStreamRules.fetch([]);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"ruleOrRules","description":"The rule or rules to fetch or an empty array","optional":false,"type":[[["R"]]]},{"name":"options","description":"An object containing optional parameters to apply","optional":true,"type":[[["FetchFilteredStreamRuleOrRulesOptions","<"],["R",">"]]]}],"returns":[[["Promise","<"],["FilteredStreamRuleManagerFetchResult","<"],["R",">>"]]],"returnsDescription":"A {@link FilteredStreamRule} or a {@link Collection} of them","meta":{"line":36,"file":"FilteredStreamRuleManager.ts","path":"src/managers"}},{"name":"resolve","description":"Resolves a structure resolvable to its respective structure.","params":[{"name":"idOrInstance","description":"The ID or instance of the structure held by this manager","optional":false,"type":[[["FilteredStreamRuleResolvable"]]]}],"returns":[[["null"," | "],["FilteredStreamRule"]]],"meta":{"line":38,"file":"BaseManager.ts","path":"src/managers"}},{"name":"resolveId","description":"Resolves a structure resolvable to its id.","params":[{"name":"idOrInstance","description":"The ID or instance of the strucutre held by this manager","optional":false,"type":[[["FilteredStreamRuleResolvable"]]]}],"returns":[[["null"," | "],["string"]]],"meta":{"line":48,"file":"BaseManager.ts","path":"src/managers"}}],"meta":{"line":13,"file":"FilteredStreamRuleManager.ts","path":"src/managers"}},{"name":"FollowedListsBook","description":"A class for fetching lists followed by a user","extends":["BaseBook"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]},{"name":"options","description":"The options to initialize the book with","optional":false,"type":[[["FollowedListsBookOptions"]]]}],"returns":[[["FollowedListsBook"]]],"meta":{"line":22,"file":"FollowedListsBook.ts","path":"src/books"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseBook.ts","path":"src/books"}},{"name":"hasMore","description":"Whether there are more pages of tweets to be fetched","type":[[["boolean"]]],"meta":{"line":44,"file":"BaseBook.ts","path":"src/books"}},{"name":"maxResultsPerPage","description":"The maximum amount of tweets that will be fetched per page.","type":[[["null"," | "],["number"]]],"meta":{"line":37,"file":"BaseBook.ts","path":"src/books"}},{"name":"userId","description":"The Id of the user this book belongs to","type":[[["string"]]],"meta":{"line":16,"file":"FollowedListsBook.ts","path":"src/books"}}],"methods":[{"name":"#fetchPages","access":"private","params":[{"name":"token","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["List",">>"]]],"meta":{"line":51,"file":"FollowedListsBook.ts","path":"src/books"}},{"name":"fetchNextPage","description":"Fetches the next page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["List",">>"]]],"returnsDescription":"A {@link Collection} of {@link List} that the given user follows","meta":{"line":33,"file":"FollowedListsBook.ts","path":"src/books"}},{"name":"fetchPreviousPage","description":"Fetches the previous page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["List",">>"]]],"returnsDescription":"A {@link Collection} of {@link List} that the given user follows","meta":{"line":46,"file":"FollowedListsBook.ts","path":"src/books"}}],"meta":{"line":12,"file":"FollowedListsBook.ts","path":"src/books"}},{"name":"LikedByUsersBook","description":"A class for fetching users who liked a tweet","extends":["BaseBook"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]},{"name":"options","description":"The options to initialize the book with","optional":false,"type":[[["LikedByUsersBookOptions"]]]}],"returns":[[["LikedByUsersBook"]]],"meta":{"line":22,"file":"LikedByUsersBook.ts","path":"src/books"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseBook.ts","path":"src/books"}},{"name":"hasMore","description":"Whether there are more pages of tweets to be fetched","type":[[["boolean"]]],"meta":{"line":44,"file":"BaseBook.ts","path":"src/books"}},{"name":"maxResultsPerPage","description":"The maximum amount of tweets that will be fetched per page.","type":[[["null"," | "],["number"]]],"meta":{"line":37,"file":"BaseBook.ts","path":"src/books"}},{"name":"tweetId","description":"The Id of the tweet this book belongs to","type":[[["string"]]],"meta":{"line":16,"file":"LikedByUsersBook.ts","path":"src/books"}}],"methods":[{"name":"#fetchPages","access":"private","params":[{"name":"token","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"meta":{"line":51,"file":"LikedByUsersBook.ts","path":"src/books"}},{"name":"fetchNextPage","description":"Fetches the next page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"returnsDescription":"A {@link Collection} of {@link User} who liked the given tweet","meta":{"line":33,"file":"LikedByUsersBook.ts","path":"src/books"}},{"name":"fetchPreviousPage","description":"Fetches the previous page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"returnsDescription":"A {@link Collection} of {@link User} who liked the given tweet","meta":{"line":46,"file":"LikedByUsersBook.ts","path":"src/books"}}],"meta":{"line":12,"file":"LikedByUsersBook.ts","path":"src/books"}},{"name":"LikedTweetsBook","description":"A class for fetching tweets liked by a twitter user","extends":["BaseBook"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]},{"name":"options","description":"The options to initialize the book with","optional":false,"type":[[["LikedTweetsBookOptions"]]]}],"returns":[[["LikedTweetsBook"]]],"meta":{"line":22,"file":"LikedTweetsBook.ts","path":"src/books"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseBook.ts","path":"src/books"}},{"name":"hasMore","description":"Whether there are more pages of tweets to be fetched","type":[[["boolean"]]],"meta":{"line":44,"file":"BaseBook.ts","path":"src/books"}},{"name":"maxResultsPerPage","description":"The maximum amount of tweets that will be fetched per page.","type":[[["null"," | "],["number"]]],"meta":{"line":37,"file":"BaseBook.ts","path":"src/books"}},{"name":"userId","description":"The Id of the user this book belongs to","type":[[["string"]]],"meta":{"line":16,"file":"LikedTweetsBook.ts","path":"src/books"}}],"methods":[{"name":"#fetchPages","access":"private","params":[{"name":"token","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Tweet",">>"]]],"meta":{"line":51,"file":"LikedTweetsBook.ts","path":"src/books"}},{"name":"fetchNextPage","description":"Fetches the next page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["Tweet",">>"]]],"returnsDescription":"A {@link Collection} of {@link Tweet} liked by the given user","meta":{"line":33,"file":"LikedTweetsBook.ts","path":"src/books"}},{"name":"fetchPreviousPage","description":"Fetches the previous page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["Tweet",">>"]]],"returnsDescription":"A {@link Collection} of {@link Tweet} liked by the given user","meta":{"line":46,"file":"LikedTweetsBook.ts","path":"src/books"}}],"meta":{"line":12,"file":"LikedTweetsBook.ts","path":"src/books"}},{"name":"List","extends":["SimplifiedList"],"construct":{"name":"constructor","params":[{"name":"client","optional":false,"type":[[["Client"]]]},{"name":"data","optional":false,"type":[[["SingleListLookupResponse"]]]}],"returns":[[["List"]]],"meta":{"line":12,"file":"List.ts","path":"src/structures"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseStructure.ts","path":"src/structures"}},{"name":"createdAt","type":[[["null"," | "],["string"]]],"meta":{"line":28,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"description","description":"The description of the list","type":[[["null"," | "],["string"]]],"meta":{"line":15,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"followerCount","type":[[["null"," | "],["number"]]],"meta":{"line":22,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"id","description":"The unique identifier of the strucutre","type":[[["string"]]],"meta":{"line":15,"file":"BaseStructure.ts","path":"src/structures"}},{"name":"memberCount","type":[[["null"," | "],["number"]]],"meta":{"line":24,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"name","description":"The name of the list","type":[[["string"]]],"meta":{"line":10,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"owner","description":"The owner of the list","type":[[["null"," | "],["SimplifiedUser"]]],"meta":{"line":10,"file":"List.ts","path":"src/structures"}},{"name":"ownerId","type":[[["null"," | "],["string"]]],"meta":{"line":26,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"private","description":"Whether the list is private","type":[[["null"," | "],["boolean"]]],"meta":{"line":20,"file":"SimplifiedList.ts","path":"src/structures"}}],"methods":[{"name":"#patchOwner","access":"private","params":[{"name":"users","optional":true,"type":[[["Array","<"],["APIUser",">"]]]}],"returns":[[["undefined"," | "],["SimplifiedUser"]]],"meta":{"line":17,"file":"List.ts","path":"src/structures"}},{"name":"addMember","description":"Adds a member to this list.","params":[{"name":"user","description":"The user to add as a member of the list","optional":false,"type":[[["UserResolvable"]]]}],"returns":[[["Promise","<{"],["\nis","_"],["member",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `is_member` field","meta":{"line":67,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"delete","description":"Deletes this list.","returns":[[["Promise","<{"],["\ndeleted",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `deleted` field","meta":{"line":49,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"follow","description":"Follows this list.","returns":[[["Promise","<{"],["\nfollowing",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `following` field","meta":{"line":84,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"pin","description":"Pins this list.","returns":[[["Promise","<{"],["\npinned",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `pinned` field","meta":{"line":100,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"removeMember","description":"Removes a member from this list.","params":[{"name":"user","description":"The member to remove from the list","optional":false,"type":[[["UserResolvable"]]]}],"returns":[[["Promise","<{"],["\nis","_"],["member",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `is_member` field","meta":{"line":76,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"setDescription","description":"Sets a new description for this list.","params":[{"name":"description","description":"The description to set","optional":false,"type":[[["string"]]]}],"returns":[[["Promise","<{"],["\nupdated",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `updated` field","meta":{"line":126,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"setName","description":"Sets a new name for this list.","params":[{"name":"name","description":"The name to set","optional":false,"type":[[["string"]]]}],"returns":[[["Promise","<{"],["\nupdated",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `updated` field","meta":{"line":117,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"setPrivate","description":"Sets the privacy of this list.","params":[{"name":"isPrivate","description":"Whether the list should be private","optional":false,"type":[[["boolean"]]]}],"returns":[[["Promise","<{"],["\nupdated",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `updated` field","meta":{"line":135,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"unfollow","description":"Unfollows this list.","returns":[[["Promise","<{"],["\nfollowing",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `following` field","meta":{"line":92,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"unpin","description":"Unpins this list.","returns":[[["Promise","<{"],["\npinned",": "],["false\n","}>"]]],"returnsDescription":"An object containing the `pinned` field","meta":{"line":108,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"update","description":"Updates this list.","params":[{"name":"options","description":"The options for updating the list","optional":false,"type":[[["Partial","<"],["CreateListOptions",">"]]]}],"returns":[[["Promise","<{"],["\nupdated",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `updated` field","meta":{"line":58,"file":"SimplifiedList.ts","path":"src/structures"}}],"meta":{"line":6,"file":"List.ts","path":"src/structures"}},{"name":"ListFollowersBook","description":"A class for fetching users who are followers of a list","extends":["BaseBook"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]},{"name":"options","description":"The options to initialize the book with","optional":false,"type":[[["ListFollowersBookOptions"]]]}],"returns":[[["ListFollowersBook"]]],"meta":{"line":22,"file":"ListFollowersBook.ts","path":"src/books"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseBook.ts","path":"src/books"}},{"name":"hasMore","description":"Whether there are more pages of tweets to be fetched","type":[[["boolean"]]],"meta":{"line":44,"file":"BaseBook.ts","path":"src/books"}},{"name":"listId","description":"The Id of the list this book belongs to","type":[[["string"]]],"meta":{"line":16,"file":"ListFollowersBook.ts","path":"src/books"}},{"name":"maxResultsPerPage","description":"The maximum amount of tweets that will be fetched per page.","type":[[["null"," | "],["number"]]],"meta":{"line":37,"file":"BaseBook.ts","path":"src/books"}}],"methods":[{"name":"#fetchPages","access":"private","params":[{"name":"token","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"meta":{"line":51,"file":"ListFollowersBook.ts","path":"src/books"}},{"name":"fetchNextPage","description":"Fetches the next page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"returnsDescription":"A {@link Collection} of {@link User} who follow the given list","meta":{"line":33,"file":"ListFollowersBook.ts","path":"src/books"}},{"name":"fetchPreviousPage","description":"Fetches the previous page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"returnsDescription":"A {@link Collection} of {@link User} who follow the given list","meta":{"line":46,"file":"ListFollowersBook.ts","path":"src/books"}}],"meta":{"line":12,"file":"ListFollowersBook.ts","path":"src/books"}},{"name":"ListManager","description":"The manager class that holds API methods for {@link List} objects and stores their cache","extends":["BaseManager<string, ListResolvable, List>"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]}],"returns":[[["ListManager"]]],"meta":{"line":32,"file":"ListManager.ts","path":"src/managers"}},"props":[{"name":"#holds","description":"The structure that this manager stores in its cache","access":"private","type":[[["StructureConstructable","<"],["List",">"]]],"meta":{"line":21,"file":"BaseManager.ts","path":"src/managers"}},{"name":"cache","description":"The cache of the structures held by this manager","type":[[["Collection","<"],["string",", "],["List",">"]]],"meta":{"line":16,"file":"BaseManager.ts","path":"src/managers"}},{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":11,"file":"BaseManager.ts","path":"src/managers"}}],"methods":[{"name":"#fetchSingleListById","description":"Fetches a single list using its id.","access":"private","params":[{"name":"listId","description":"The id of the list to fetch","optional":false,"type":[[["string"]]]},{"name":"options","description":"An object containing optional parameters to apply","optional":true,"type":[[["BaseFetchOptions"]]]}],"returns":[[["Promise","<"],["List",">"]]],"returnsDescription":"A {@link List}","meta":{"line":253,"file":"ListManager.ts","path":"src/managers"}},{"name":"addMember","description":"Adds a member to a list.","see":[],"examples":["const user = await client.users.fetchByUsername('iShiibi');\nconst data = await client.lists.addMember('1487049903255666689', user);\nconsole.log(data); // { is_member: true }"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"list","description":"The list to add the member to","optional":false,"type":[[["ListResolvable"]]]},{"name":"user","description":"The user to add as a member of the list","optional":false,"type":[[["UserResolvable"]]]}],"returns":[[["Promise","<{"],["\nis","_"],["member",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `is_member` field","meta":{"line":120,"file":"ListManager.ts","path":"src/managers"}},{"name":"create","description":"Creates a new list.","see":[],"examples":["const data = await client.lists.create({ name: 'Twitter.js Community', description: 'A nice place' });\nconsole.log(data); // { id: '1487049903255666689', name: 'Twitter.js Community' }"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"options","description":"The options for creating the list","optional":false,"type":[[["CreateListOptions"]]]}],"returns":[[["Promise","<{"],["\nid",": "],["string",","],["\nname",": "],["string\n","}>"]]],"returnsDescription":"An object containing `id` and `name` of the created list","meta":{"line":44,"file":"ListManager.ts","path":"src/managers"}},{"name":"delete","description":"Deletes a list.","see":[],"examples":["const data = await client.lists.delete('1487090844578377729');\nconsole.log(data); // { deleted: true }"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"list","description":"The list to delete","optional":false,"type":[[["ListResolvable"]]]}],"returns":[[["Promise","<{"],["\ndeleted",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `deleted` field","meta":{"line":79,"file":"ListManager.ts","path":"src/managers"}},{"name":"fetch","description":"Fetches a list.","see":[],"examples":["const list = await client.lists.fetch('1487049903255666689');\nconsole.log(`Fetched a list named: ${list.name}`); // Fetched a list named: Twitter.js Community"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"list","description":"The list to fetch","optional":false,"type":[[["ListResolvable"]]]},{"name":"options","description":"An object containing optional parameters to apply","optional":true,"type":[[["BaseFetchOptions"]]]}],"returns":[[["Promise","<"],["List",">"]]],"returnsDescription":"A {@link List}","meta":{"line":65,"file":"ListManager.ts","path":"src/managers"}},{"name":"follow","description":"Follows a list.","see":[],"examples":["const data = await client.lists.follow('1487049903255666689');\nconsole.log(data); // { following: true }"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"list","description":"The list to follow","optional":false,"type":[[["ListResolvable"]]]}],"returns":[[["Promise","<{"],["\nfollowing",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `following` field","meta":{"line":167,"file":"ListManager.ts","path":"src/managers"}},{"name":"pin","description":"Pins a list.","see":[],"examples":["const data = await client.lists.pin('1487049903255666689');\nconsole.log(data); // { pinned: true }"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"list","description":"The list to pin","optional":false,"type":[[["ListResolvable"]]]}],"returns":[[["Promise","<{"],["\npinned",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `pinned` field","meta":{"line":211,"file":"ListManager.ts","path":"src/managers"}},{"name":"removeMember","description":"Removes a member from a list.","see":[],"examples":["const user = await client.users.fetchByUsername('iShiibi');\nconst data = await client.lists.removeMember('1487049903255666689', user);\nconsole.log(data); // { is_member: false }"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"list","description":"The list to remove the member from","optional":false,"type":[[["ListResolvable"]]]},{"name":"member","description":"The member to remove from the list","optional":false,"type":[[["UserResolvable"]]]}],"returns":[[["Promise","<{"],["\nis","_"],["member",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `is_member` field","meta":{"line":143,"file":"ListManager.ts","path":"src/managers"}},{"name":"resolve","description":"Resolves a structure resolvable to its respective structure.","params":[{"name":"idOrInstance","description":"The ID or instance of the structure held by this manager","optional":false,"type":[[["ListResolvable"]]]}],"returns":[[["null"," | "],["List"]]],"meta":{"line":38,"file":"BaseManager.ts","path":"src/managers"}},{"name":"resolveId","description":"Resolves a structure resolvable to its id.","params":[{"name":"idOrInstance","description":"The ID or instance of the strucutre held by this manager","optional":false,"type":[[["ListResolvable"]]]}],"returns":[[["null"," | "],["string"]]],"meta":{"line":48,"file":"BaseManager.ts","path":"src/managers"}},{"name":"unfollow","description":"Unfollows a list.","see":[],"examples":["const data = await client.lists.unfollow('1487049903255666689');\nconsole.log(data); // { following: false }"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"list","description":"The list to unfollow","optional":false,"type":[[["ListResolvable"]]]}],"returns":[[["Promise","<{"],["\nfollowing",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `following` field","meta":{"line":190,"file":"ListManager.ts","path":"src/managers"}},{"name":"unpin","description":"Unpins a list.","see":[],"examples":["const data = await client.lists.unpin('1487049903255666689');\nconsole.log(data); // { pinned: false }"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"list","description":"The list to unpin","optional":false,"type":[[["ListResolvable"]]]}],"returns":[[["Promise","<{"],["\npinned",": "],["false\n","}>"]]],"returnsDescription":"An object containing the `pinned` field","meta":{"line":234,"file":"ListManager.ts","path":"src/managers"}},{"name":"update","description":"Updates a lists.","see":[],"examples":["const data = await client.lists.update('1487049903255666689', { description: 'A nice place for everyone' });\nconsole.log(data); // { updated: true }"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"list","description":"The list to update","optional":false,"type":[[["ListResolvable"]]]},{"name":"options","description":"The options for updating the list","optional":false,"type":[[["Partial","<"],["CreateListOptions",">"]]]}],"returns":[[["Promise","<{"],["\nupdated",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `updated` field","meta":{"line":96,"file":"ListManager.ts","path":"src/managers"}}],"meta":{"line":28,"file":"ListManager.ts","path":"src/managers"}},{"name":"ListMembersBook","description":"A class for fetching users who are members of a list","extends":["BaseBook"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]},{"name":"options","description":"The options to initialize the book with","optional":false,"type":[[["ListMembersBookOptions"]]]}],"returns":[[["ListMembersBook"]]],"meta":{"line":22,"file":"ListMembersBook.ts","path":"src/books"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseBook.ts","path":"src/books"}},{"name":"hasMore","description":"Whether there are more pages of tweets to be fetched","type":[[["boolean"]]],"meta":{"line":44,"file":"BaseBook.ts","path":"src/books"}},{"name":"listId","description":"The Id of the list this book belongs to","type":[[["string"]]],"meta":{"line":16,"file":"ListMembersBook.ts","path":"src/books"}},{"name":"maxResultsPerPage","description":"The maximum amount of tweets that will be fetched per page.","type":[[["null"," | "],["number"]]],"meta":{"line":37,"file":"BaseBook.ts","path":"src/books"}}],"methods":[{"name":"#fetchPages","access":"private","params":[{"name":"token","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"meta":{"line":51,"file":"ListMembersBook.ts","path":"src/books"}},{"name":"fetchNextPage","description":"Fetches the next page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"returnsDescription":"A {@link Collection} of {@link User} who are members of the given list","meta":{"line":33,"file":"ListMembersBook.ts","path":"src/books"}},{"name":"fetchPreviousPage","description":"Fetches the previous page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"returnsDescription":"A {@link Collection} of {@link User} who are members of the given list","meta":{"line":46,"file":"ListMembersBook.ts","path":"src/books"}}],"meta":{"line":12,"file":"ListMembersBook.ts","path":"src/books"}},{"name":"ListTweetsBook","description":"A class for fetching tweets from a list","extends":["BaseBook"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]},{"name":"options","description":"The options to initialize the book with","optional":false,"type":[[["ListTweetsBookOptions"]]]}],"returns":[[["ListTweetsBook"]]],"meta":{"line":22,"file":"ListTweetsBook.ts","path":"src/books"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseBook.ts","path":"src/books"}},{"name":"hasMore","description":"Whether there are more pages of tweets to be fetched","type":[[["boolean"]]],"meta":{"line":44,"file":"BaseBook.ts","path":"src/books"}},{"name":"listId","description":"The Id of the list this book belongs to","type":[[["string"]]],"meta":{"line":16,"file":"ListTweetsBook.ts","path":"src/books"}},{"name":"maxResultsPerPage","description":"The maximum amount of tweets that will be fetched per page.","type":[[["null"," | "],["number"]]],"meta":{"line":37,"file":"BaseBook.ts","path":"src/books"}}],"methods":[{"name":"#fetchPages","access":"private","params":[{"name":"token","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Tweet",">>"]]],"meta":{"line":51,"file":"ListTweetsBook.ts","path":"src/books"}},{"name":"fetchNextPage","description":"Fetches the next page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["Tweet",">>"]]],"returnsDescription":"A {@link Collection} of {@link Tweet} belonging to the given list","meta":{"line":33,"file":"ListTweetsBook.ts","path":"src/books"}},{"name":"fetchPreviousPage","description":"Fetches the previous page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["Tweet",">>"]]],"returnsDescription":"A {@link Collection} of {@link Tweet} belonging to the given list","meta":{"line":46,"file":"ListTweetsBook.ts","path":"src/books"}}],"meta":{"line":12,"file":"ListTweetsBook.ts","path":"src/books"}},{"name":"MatchingRule","description":"The rule that matched against the filtered tweet","construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["{"],["\nid",": "],["string",","],["\ntag",": "],["string\n","}"]]]}],"returns":[[["MatchingRule"]]],"meta":{"line":283,"file":"Miscellaneous.ts","path":"src/structures/misc"}},"props":[{"name":"id","description":"The id of the filter rule","type":[[["string"]]],"meta":{"line":276,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"tag","description":"The tag of the filter rule","type":[[["null"," | "],["string"]]],"meta":{"line":281,"file":"Miscellaneous.ts","path":"src/structures/misc"}}],"meta":{"line":272,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"Media","description":"The class that represents a media content in a {@link Tweet}","construct":{"name":"constructor","params":[{"name":"client","optional":false,"type":[[["Client"]]]},{"name":"data","optional":false,"type":[[["APIMedia"]]]}],"returns":[[["Media"]]],"meta":{"line":39,"file":"Media.ts","path":"src/structures"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":12,"file":"Media.ts","path":"src/structures"}},{"name":"duration","type":[[["null"," | "],["number"]]],"meta":{"line":21,"file":"Media.ts","path":"src/structures"}},{"name":"height","type":[[["null"," | "],["number"]]],"meta":{"line":23,"file":"Media.ts","path":"src/structures"}},{"name":"id","description":"The unique identifier of the media","type":[[["string"]]],"meta":{"line":17,"file":"Media.ts","path":"src/structures"}},{"name":"nonPublicMetrics","type":[[["null"," | "],["MediaNonPublicMetrics"]]],"meta":{"line":25,"file":"Media.ts","path":"src/structures"}},{"name":"organicMetrics","type":[[["null"," | "],["MediaOrganicMetrics"]]],"meta":{"line":27,"file":"Media.ts","path":"src/structures"}},{"name":"previewImageURL","type":[[["null"," | "],["string"]]],"meta":{"line":29,"file":"Media.ts","path":"src/structures"}},{"name":"promotedMetrics","type":[[["null"," | "],["MediaPromotedMetrics"]]],"meta":{"line":31,"file":"Media.ts","path":"src/structures"}},{"name":"publicMetrics","type":[[["null"," | "],["MediaPublicMetrics"]]],"meta":{"line":33,"file":"Media.ts","path":"src/structures"}},{"name":"type","type":[[["APIMediaType"]]],"meta":{"line":19,"file":"Media.ts","path":"src/structures"}},{"name":"url","type":[[["null"," | "],["string"]]],"meta":{"line":35,"file":"Media.ts","path":"src/structures"}},{"name":"width","type":[[["null"," | "],["number"]]],"meta":{"line":37,"file":"Media.ts","path":"src/structures"}}],"meta":{"line":8,"file":"Media.ts","path":"src/structures"}},{"name":"MediaNonPublicMetrics","construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APIMediaNonPublicMetrics"]]]}],"returns":[[["MediaNonPublicMetrics"]]],"meta":{"line":34,"file":"MediaMetrics.ts","path":"src/structures/misc"}},"props":[{"name":"playbackCountFifty","description":"Number of users who made it through 50% of the video","type":[[["number"]]],"meta":{"line":22,"file":"MediaMetrics.ts","path":"src/structures/misc"}},{"name":"playbackCountHundred","description":"Number of users who made it through 100% of the video","type":[[["number"]]],"meta":{"line":32,"file":"MediaMetrics.ts","path":"src/structures/misc"}},{"name":"playbackCountSeventyFive","description":"Number of users who made it through 75% of the video","type":[[["number"]]],"meta":{"line":27,"file":"MediaMetrics.ts","path":"src/structures/misc"}},{"name":"playbackCountTwentyFive","description":"Number of users who made it through 25% of the video","type":[[["number"]]],"meta":{"line":17,"file":"MediaMetrics.ts","path":"src/structures/misc"}},{"name":"playbackCountZero","description":"Number of users who made it through 0% of the video","type":[[["number"]]],"meta":{"line":12,"file":"MediaMetrics.ts","path":"src/structures/misc"}}],"meta":{"line":8,"file":"MediaMetrics.ts","path":"src/structures/misc"}},{"name":"MediaOrganicMetrics","extends":["MediaPublicNonPublicMetricsUnion"],"construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APIMediaOrganicMetrics"]]]}],"returns":[[["MediaOrganicMetrics"]]],"meta":{"line":68,"file":"MediaMetrics.ts","path":"src/structures/misc"}},"props":[{"name":"playbackCountFifty","description":"Number of users who made it through 50% of the video","type":[[["number"]]],"meta":{"line":22,"file":"MediaMetrics.ts","path":"src/structures/misc"}},{"name":"playbackCountHundred","description":"Number of users who made it through 100% of the video","type":[[["number"]]],"meta":{"line":32,"file":"MediaMetrics.ts","path":"src/structures/misc"}},{"name":"playbackCountSeventyFive","description":"Number of users who made it through 75% of the video","type":[[["number"]]],"meta":{"line":27,"file":"MediaMetrics.ts","path":"src/structures/misc"}},{"name":"playbackCountTwentyFive","description":"Number of users who made it through 25% of the video","type":[[["number"]]],"meta":{"line":17,"file":"MediaMetrics.ts","path":"src/structures/misc"}},{"name":"playbackCountZero","description":"Number of users who made it through 0% of the video","type":[[["number"]]],"meta":{"line":12,"file":"MediaMetrics.ts","path":"src/structures/misc"}},{"name":"viewCount","description":"Number of times this video has been viewed","type":[[["number"]]],"meta":{"line":58,"file":"MediaMetrics.ts","path":"src/structures/misc"}}],"meta":{"line":67,"file":"MediaMetrics.ts","path":"src/structures/misc"}},{"name":"MediaPromotedMetrics","extends":["MediaPublicNonPublicMetricsUnion"],"construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APIMediaPromotedMetrics"]]]}],"returns":[[["MediaPromotedMetrics"]]],"meta":{"line":74,"file":"MediaMetrics.ts","path":"src/structures/misc"}},"props":[{"name":"playbackCountFifty","description":"Number of users who made it through 50% of the video","type":[[["number"]]],"meta":{"line":22,"file":"MediaMetrics.ts","path":"src/structures/misc"}},{"name":"playbackCountHundred","description":"Number of users who made it through 100% of the video","type":[[["number"]]],"meta":{"line":32,"file":"MediaMetrics.ts","path":"src/structures/misc"}},{"name":"playbackCountSeventyFive","description":"Number of users who made it through 75% of the video","type":[[["number"]]],"meta":{"line":27,"file":"MediaMetrics.ts","path":"src/structures/misc"}},{"name":"playbackCountTwentyFive","description":"Number of users who made it through 25% of the video","type":[[["number"]]],"meta":{"line":17,"file":"MediaMetrics.ts","path":"src/structures/misc"}},{"name":"playbackCountZero","description":"Number of users who made it through 0% of the video","type":[[["number"]]],"meta":{"line":12,"file":"MediaMetrics.ts","path":"src/structures/misc"}},{"name":"viewCount","description":"Number of times this video has been viewed","type":[[["number"]]],"meta":{"line":58,"file":"MediaMetrics.ts","path":"src/structures/misc"}}],"meta":{"line":73,"file":"MediaMetrics.ts","path":"src/structures/misc"}},{"name":"MediaPublicMetrics","construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APIMediaPublicMetrics"]]]}],"returns":[[["MediaPublicMetrics"]]],"meta":{"line":49,"file":"MediaMetrics.ts","path":"src/structures/misc"}},"props":[{"name":"viewCount","description":"Number of times this video has been viewed","type":[[["number"]]],"meta":{"line":47,"file":"MediaMetrics.ts","path":"src/structures/misc"}}],"meta":{"line":43,"file":"MediaMetrics.ts","path":"src/structures/misc"}},{"name":"MediaPublicNonPublicMetricsUnion","extends":["MediaNonPublicMetrics"],"construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APIMediaNonPublicMetrics"," & "],["APIMediaPublicMetrics"]]]}],"returns":[[["MediaPublicNonPublicMetricsUnion"]]],"meta":{"line":60,"file":"MediaMetrics.ts","path":"src/structures/misc"}},"props":[{"name":"playbackCountFifty","description":"Number of users who made it through 50% of the video","type":[[["number"]]],"meta":{"line":22,"file":"MediaMetrics.ts","path":"src/structures/misc"}},{"name":"playbackCountHundred","description":"Number of users who made it through 100% of the video","type":[[["number"]]],"meta":{"line":32,"file":"MediaMetrics.ts","path":"src/structures/misc"}},{"name":"playbackCountSeventyFive","description":"Number of users who made it through 75% of the video","type":[[["number"]]],"meta":{"line":27,"file":"MediaMetrics.ts","path":"src/structures/misc"}},{"name":"playbackCountTwentyFive","description":"Number of users who made it through 25% of the video","type":[[["number"]]],"meta":{"line":17,"file":"MediaMetrics.ts","path":"src/structures/misc"}},{"name":"playbackCountZero","description":"Number of users who made it through 0% of the video","type":[[["number"]]],"meta":{"line":12,"file":"MediaMetrics.ts","path":"src/structures/misc"}},{"name":"viewCount","description":"Number of times this video has been viewed","type":[[["number"]]],"meta":{"line":58,"file":"MediaMetrics.ts","path":"src/structures/misc"}}],"meta":{"line":54,"file":"MediaMetrics.ts","path":"src/structures/misc"}},{"name":"MemberOfListsBook","description":"A class for fetching lists in which a user is a member","extends":["BaseBook"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]},{"name":"options","description":"The options to initialize the book with","optional":false,"type":[[["MemberOfListsBookOptions"]]]}],"returns":[[["MemberOfListsBook"]]],"meta":{"line":22,"file":"MemberOfListsBook.ts","path":"src/books"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseBook.ts","path":"src/books"}},{"name":"hasMore","description":"Whether there are more pages of tweets to be fetched","type":[[["boolean"]]],"meta":{"line":44,"file":"BaseBook.ts","path":"src/books"}},{"name":"maxResultsPerPage","description":"The maximum amount of tweets that will be fetched per page.","type":[[["null"," | "],["number"]]],"meta":{"line":37,"file":"BaseBook.ts","path":"src/books"}},{"name":"userId","description":"The Id of the user this book belongs to","type":[[["string"]]],"meta":{"line":16,"file":"MemberOfListsBook.ts","path":"src/books"}}],"methods":[{"name":"#fetchPages","access":"private","params":[{"name":"token","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["List",">>"]]],"meta":{"line":51,"file":"MemberOfListsBook.ts","path":"src/books"}},{"name":"fetchNextPage","description":"Fetches the next page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["List",">>"]]],"returnsDescription":"A {@link Collection} of {@link List} in which the given user is a member","meta":{"line":33,"file":"MemberOfListsBook.ts","path":"src/books"}},{"name":"fetchPreviousPage","description":"Fetches the previous page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["List",">>"]]],"returnsDescription":"A {@link Collection} of {@link List} in which the given user is a member","meta":{"line":46,"file":"MemberOfListsBook.ts","path":"src/books"}}],"meta":{"line":12,"file":"MemberOfListsBook.ts","path":"src/books"}},{"name":"MutedUsersBook","description":"A class for fetching users muted by the authorized user","extends":["BaseBook"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]},{"name":"options","description":"The options to initialize the book with","optional":false,"type":[[["MutedUsersBookOptions"]]]}],"returns":[[["MutedUsersBook"]]],"meta":{"line":22,"file":"MutedUsersBook.ts","path":"src/books"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseBook.ts","path":"src/books"}},{"name":"hasMore","description":"Whether there are more pages of tweets to be fetched","type":[[["boolean"]]],"meta":{"line":44,"file":"BaseBook.ts","path":"src/books"}},{"name":"maxResultsPerPage","description":"The maximum amount of tweets that will be fetched per page.","type":[[["null"," | "],["number"]]],"meta":{"line":37,"file":"BaseBook.ts","path":"src/books"}},{"name":"userId","description":"The Id of the user this book belongs to","type":[[["string"]]],"meta":{"line":16,"file":"MutedUsersBook.ts","path":"src/books"}}],"methods":[{"name":"#fetchPages","access":"private","params":[{"name":"token","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"meta":{"line":51,"file":"MutedUsersBook.ts","path":"src/books"}},{"name":"fetchNextPage","description":"Fetches the next page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"returnsDescription":"A {@link Collection} of {@link User} muted by the given user","meta":{"line":33,"file":"MutedUsersBook.ts","path":"src/books"}},{"name":"fetchPreviousPage","description":"Fetches the previous page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"returnsDescription":"A {@link Collection} of {@link User} muted by the given user","meta":{"line":46,"file":"MutedUsersBook.ts","path":"src/books"}}],"meta":{"line":12,"file":"MutedUsersBook.ts","path":"src/books"}},{"name":"OwnedListsBook","description":"A class for fetching lists owned by a user","extends":["BaseBook"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]},{"name":"options","description":"The options to initialize the book with","optional":false,"type":[[["OwnedListsBookOptions"]]]}],"returns":[[["OwnedListsBook"]]],"meta":{"line":22,"file":"OwnedListsBook.ts","path":"src/books"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseBook.ts","path":"src/books"}},{"name":"hasMore","description":"Whether there are more pages of tweets to be fetched","type":[[["boolean"]]],"meta":{"line":44,"file":"BaseBook.ts","path":"src/books"}},{"name":"maxResultsPerPage","description":"The maximum amount of tweets that will be fetched per page.","type":[[["null"," | "],["number"]]],"meta":{"line":37,"file":"BaseBook.ts","path":"src/books"}},{"name":"userId","description":"The Id of the user this book belongs to","type":[[["string"]]],"meta":{"line":16,"file":"OwnedListsBook.ts","path":"src/books"}}],"methods":[{"name":"#fetchPages","access":"private","params":[{"name":"token","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["List",">>"]]],"meta":{"line":51,"file":"OwnedListsBook.ts","path":"src/books"}},{"name":"fetchNextPage","description":"Fetches the next page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["List",">>"]]],"returnsDescription":"A {@link Collection} of {@link List} owned by the given user","meta":{"line":33,"file":"OwnedListsBook.ts","path":"src/books"}},{"name":"fetchPreviousPage","description":"Fetches the previous page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["List",">>"]]],"returnsDescription":"A {@link Collection} of {@link List} owned by the given user","meta":{"line":46,"file":"OwnedListsBook.ts","path":"src/books"}}],"meta":{"line":12,"file":"OwnedListsBook.ts","path":"src/books"}},{"name":"PinnedListsBook","description":"A class for fetching lists pinned by the authorized user","extends":["BaseBook"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]},{"name":"options","description":"The options to initialize the book with","optional":false,"type":[[["PinnedListsBookOptions"]]]}],"returns":[[["PinnedListsBook"]]],"meta":{"line":22,"file":"PinnedListsBook.ts","path":"src/books"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseBook.ts","path":"src/books"}},{"name":"hasMore","description":"Whether there are more pages of tweets to be fetched","type":[[["boolean"]]],"meta":{"line":44,"file":"BaseBook.ts","path":"src/books"}},{"name":"maxResultsPerPage","description":"The maximum amount of tweets that will be fetched per page.","type":[[["null"," | "],["number"]]],"meta":{"line":37,"file":"BaseBook.ts","path":"src/books"}},{"name":"userId","description":"The Id of the user this book belongs to","type":[[["string"]]],"meta":{"line":16,"file":"PinnedListsBook.ts","path":"src/books"}}],"methods":[{"name":"#fetchPages","access":"private","params":[{"name":"token","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["List",">>"]]],"meta":{"line":51,"file":"PinnedListsBook.ts","path":"src/books"}},{"name":"fetchNextPage","description":"Fetches the next page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["List",">>"]]],"returnsDescription":"A {@link Collection} of {@link List} pinned by the given user","meta":{"line":33,"file":"PinnedListsBook.ts","path":"src/books"}},{"name":"fetchPreviousPage","description":"Fetches the previous page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["List",">>"]]],"returnsDescription":"A {@link Collection} of {@link List} pinned by the given user","meta":{"line":46,"file":"PinnedListsBook.ts","path":"src/books"}}],"meta":{"line":12,"file":"PinnedListsBook.ts","path":"src/books"}},{"name":"Place","description":"The class that represents a place tagged in a {@link Tweet}","construct":{"name":"constructor","params":[{"name":"client","optional":false,"type":[[["Client"]]]},{"name":"data","optional":false,"type":[[["APIPlace"]]]}],"returns":[[["Place"]]],"meta":{"line":33,"file":"Place.ts","path":"src/structures"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":12,"file":"Place.ts","path":"src/structures"}},{"name":"containedWithin","type":[[["Array","<"],["string",">"]]],"meta":{"line":21,"file":"Place.ts","path":"src/structures"}},{"name":"country","type":[[["null"," | "],["string"]]],"meta":{"line":23,"file":"Place.ts","path":"src/structures"}},{"name":"countryCode","type":[[["null"," | "],["string"]]],"meta":{"line":25,"file":"Place.ts","path":"src/structures"}},{"name":"fullName","type":[[["string"]]],"meta":{"line":19,"file":"Place.ts","path":"src/structures"}},{"name":"geo","type":[[["null"," | "],["APIPlaceGeo"]]],"meta":{"line":27,"file":"Place.ts","path":"src/structures"}},{"name":"id","description":"The unique identifier of the place","type":[[["string"]]],"meta":{"line":17,"file":"Place.ts","path":"src/structures"}},{"name":"name","type":[[["null"," | "],["string"]]],"meta":{"line":29,"file":"Place.ts","path":"src/structures"}},{"name":"placeType","type":[[["null"," | "],["APIPlaceType"]]],"meta":{"line":31,"file":"Place.ts","path":"src/structures"}}],"meta":{"line":8,"file":"Place.ts","path":"src/structures"}},{"name":"PlaceGeo","construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APIPlaceGeo"]]]}],"returns":[[["PlaceGeo"]]],"meta":{"line":152,"file":"Miscellaneous.ts","path":"src/structures/misc"}},"props":[{"name":"bbox","type":[[["APIPlaceGeoBoundingBox"]]],"meta":{"line":149,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"properties","type":[[["Record","<"],["string",", "],["unknown",">"]]],"meta":{"line":150,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"type","type":[[["string"]]],"meta":{"line":148,"file":"Miscellaneous.ts","path":"src/structures/misc"}}],"meta":{"line":147,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"Poll","description":"The class that represents a poll in a {@link Tweet}","extends":["BaseStructure"],"construct":{"name":"constructor","params":[{"name":"client","optional":false,"type":[[["Client"]]]},{"name":"data","optional":false,"type":[[["APIPoll"]]]}],"returns":[[["Poll"]]],"meta":{"line":18,"file":"Poll.ts","path":"src/structures"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseStructure.ts","path":"src/structures"}},{"name":"durationMinutes","type":[[["null"," | "],["number"]]],"meta":{"line":12,"file":"Poll.ts","path":"src/structures"}},{"name":"endDatetime","type":[[["null"," | "],["Date"]]],"meta":{"line":14,"file":"Poll.ts","path":"src/structures"}},{"name":"id","description":"The unique identifier of the strucutre","type":[[["string"]]],"meta":{"line":15,"file":"BaseStructure.ts","path":"src/structures"}},{"name":"options","type":[[["Array","<"],["PollOption",">"]]],"meta":{"line":10,"file":"Poll.ts","path":"src/structures"}},{"name":"votingStatus","type":[[["null"," | "],["APIPollVotingStatus"]]],"meta":{"line":16,"file":"Poll.ts","path":"src/structures"}}],"meta":{"line":9,"file":"Poll.ts","path":"src/structures"}},{"name":"PollOption","construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APIPollOption"]]]}],"returns":[[["PollOption"]]],"meta":{"line":140,"file":"Miscellaneous.ts","path":"src/structures/misc"}},"props":[{"name":"label","type":[[["string"]]],"meta":{"line":137,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"position","type":[[["number"]]],"meta":{"line":136,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"votes","type":[[["number"]]],"meta":{"line":138,"file":"Miscellaneous.ts","path":"src/structures/misc"}}],"meta":{"line":135,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"QuoteTweetsBook","description":"A class for fetching quote tweets of a tweet","extends":["BaseBook"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]},{"name":"options","description":"The options to initialize the book with","optional":false,"type":[[["QuoteTweetsBookOptions"]]]}],"returns":[[["QuoteTweetsBook"]]],"meta":{"line":21,"file":"QuoteTweetsBook.ts","path":"src/books"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseBook.ts","path":"src/books"}},{"name":"hasMore","description":"Whether there are more pages of tweets to be fetched","type":[[["boolean"]]],"meta":{"line":44,"file":"BaseBook.ts","path":"src/books"}},{"name":"maxResultsPerPage","description":"The maximum amount of tweets that will be fetched per page.","type":[[["null"," | "],["number"]]],"meta":{"line":37,"file":"BaseBook.ts","path":"src/books"}},{"name":"tweetId","description":"The tweet id whose quote tweets are to be fetched","type":[[["string"]]],"meta":{"line":15,"file":"QuoteTweetsBook.ts","path":"src/books"}}],"methods":[{"name":"#fetchPages","access":"private","params":[{"name":"token","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Tweet",">>"]]],"meta":{"line":39,"file":"QuoteTweetsBook.ts","path":"src/books"}},{"name":"fetchNextPage","description":"Fetches the next page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["Tweet",">>"]]],"returnsDescription":"A {@link Collection} of {@link Tweet} that quote the given tweet","meta":{"line":30,"file":"QuoteTweetsBook.ts","path":"src/books"}}],"meta":{"line":11,"file":"QuoteTweetsBook.ts","path":"src/books"}},{"name":"RequestData","description":"The class for storing data required for generating an API request","construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["RequestDataOptions","<"],["Q",", "],["B",">"]]]}],"returns":[[["RequestData","<"],["Q",", "],["B",">"]]],"meta":{"line":64,"file":"Miscellaneous.ts","path":"src/structures/misc"}},"props":[{"name":"body","description":"The body of the request","type":[[["B"]]],"meta":{"line":52,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"isStreaming","description":"Whether the endpoint responds with a stream of data over persisent http connection","type":[[["boolean"]]],"meta":{"line":57,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"isUserContext","description":"Whether the endpoint need user context authorization","type":[[["boolean"]]],"meta":{"line":62,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"query","description":"The query for the request","type":[[["Q"]]],"meta":{"line":47,"file":"Miscellaneous.ts","path":"src/structures/misc"}}],"meta":{"line":43,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"RetweetedByUsersBook","description":"A class for fetching users who retweeted a tweet","extends":["BaseBook"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]},{"name":"options","description":"The options to initialize the book with","optional":false,"type":[[["RetweetedByUsersBookOptions"]]]}],"returns":[[["RetweetedByUsersBook"]]],"meta":{"line":22,"file":"RetweetedByUsersBook.ts","path":"src/books"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseBook.ts","path":"src/books"}},{"name":"hasMore","description":"Whether there are more pages of tweets to be fetched","type":[[["boolean"]]],"meta":{"line":44,"file":"BaseBook.ts","path":"src/books"}},{"name":"maxResultsPerPage","description":"The maximum amount of tweets that will be fetched per page.","type":[[["null"," | "],["number"]]],"meta":{"line":37,"file":"BaseBook.ts","path":"src/books"}},{"name":"tweetId","description":"The Id of the tweet this book belongs to","type":[[["string"]]],"meta":{"line":16,"file":"RetweetedByUsersBook.ts","path":"src/books"}}],"methods":[{"name":"#fetchPages","access":"private","params":[{"name":"token","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"meta":{"line":51,"file":"RetweetedByUsersBook.ts","path":"src/books"}},{"name":"fetchNextPage","description":"Fetches the next page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"returnsDescription":"A {@link Collection} of {@link User} who retweeted the given tweet","meta":{"line":33,"file":"RetweetedByUsersBook.ts","path":"src/books"}},{"name":"fetchPreviousPage","description":"Fetches the previous page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"returnsDescription":"A {@link Collection} of {@link User} who retweeted the given tweet","meta":{"line":46,"file":"RetweetedByUsersBook.ts","path":"src/books"}}],"meta":{"line":12,"file":"RetweetedByUsersBook.ts","path":"src/books"}},{"name":"SearchTweetsBook","description":"A class for fetching tweets using a search query","extends":["BaseRangeBook"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]},{"name":"options","description":"The options to initialize the book with","optional":false,"type":[[["SearchTweetsBookOptions"]]]}],"returns":[[["SearchTweetsBook"]]],"meta":{"line":27,"file":"SearchTweetsBook.ts","path":"src/books"}},"props":[{"name":"afterTweetId","description":"The book will fetch tweets that were created after this tweet Id","type":[[["null"," | "],["string"]]],"meta":{"line":9,"file":"BaseRangeBook.ts","path":"src/books"}},{"name":"beforeTweetId","description":"The book will fetch tweets that were created before this tweet Id","type":[[["null"," | "],["string"]]],"meta":{"line":14,"file":"BaseRangeBook.ts","path":"src/books"}},{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseBook.ts","path":"src/books"}},{"name":"endTimestamp","description":"The book will fetch tweets that were created at or before this timestamp","type":[[["null"," | "],["number"]]],"meta":{"line":24,"file":"BaseRangeBook.ts","path":"src/books"}},{"name":"hasMore","description":"Whether there are more pages of tweets to be fetched","type":[[["boolean"]]],"meta":{"line":44,"file":"BaseBook.ts","path":"src/books"}},{"name":"maxResultsPerPage","description":"The maximum amount of tweets that will be fetched per page.","type":[[["null"," | "],["number"]]],"meta":{"line":37,"file":"BaseBook.ts","path":"src/books"}},{"name":"query","description":"The query for searching the tweets","type":[[["string"]]],"meta":{"line":16,"file":"SearchTweetsBook.ts","path":"src/books"}},{"name":"sortOrder","description":"The order in which tweets would return","type":[[["undefined"," | "],["null"," | "],["'recency'"," | "],["'relevancy'"]]],"meta":{"line":21,"file":"SearchTweetsBook.ts","path":"src/books"}},{"name":"startTimestamp","description":"The book will fetch tweets that were created at or after this timestamp","type":[[["null"," | "],["number"]]],"meta":{"line":19,"file":"BaseRangeBook.ts","path":"src/books"}}],"methods":[{"name":"#fetchPages","access":"private","params":[{"name":"token","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Tweet",">>"]]],"meta":{"line":46,"file":"SearchTweetsBook.ts","path":"src/books"}},{"name":"fetchNextPage","description":"Fetches the next page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["Tweet",">>"]]],"returnsDescription":"A {@link Collection} of {@link Tweet} matching the given search query","meta":{"line":37,"file":"SearchTweetsBook.ts","path":"src/books"}}],"meta":{"line":12,"file":"SearchTweetsBook.ts","path":"src/books"}},{"name":"SimplifiedList","extends":["BaseStructure"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]},{"name":"data","description":"The raw data sent by the API for the list","optional":false,"type":[[["APIList"]]]}],"returns":[[["SimplifiedList"]]],"meta":{"line":34,"file":"SimplifiedList.ts","path":"src/structures"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseStructure.ts","path":"src/structures"}},{"name":"createdAt","type":[[["null"," | "],["string"]]],"meta":{"line":28,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"description","description":"The description of the list","type":[[["null"," | "],["string"]]],"meta":{"line":15,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"followerCount","type":[[["null"," | "],["number"]]],"meta":{"line":22,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"id","description":"The unique identifier of the strucutre","type":[[["string"]]],"meta":{"line":15,"file":"BaseStructure.ts","path":"src/structures"}},{"name":"memberCount","type":[[["null"," | "],["number"]]],"meta":{"line":24,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"name","description":"The name of the list","type":[[["string"]]],"meta":{"line":10,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"ownerId","type":[[["null"," | "],["string"]]],"meta":{"line":26,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"private","description":"Whether the list is private","type":[[["null"," | "],["boolean"]]],"meta":{"line":20,"file":"SimplifiedList.ts","path":"src/structures"}}],"methods":[{"name":"addMember","description":"Adds a member to this list.","params":[{"name":"user","description":"The user to add as a member of the list","optional":false,"type":[[["UserResolvable"]]]}],"returns":[[["Promise","<{"],["\nis","_"],["member",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `is_member` field","meta":{"line":67,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"delete","description":"Deletes this list.","returns":[[["Promise","<{"],["\ndeleted",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `deleted` field","meta":{"line":49,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"follow","description":"Follows this list.","returns":[[["Promise","<{"],["\nfollowing",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `following` field","meta":{"line":84,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"pin","description":"Pins this list.","returns":[[["Promise","<{"],["\npinned",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `pinned` field","meta":{"line":100,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"removeMember","description":"Removes a member from this list.","params":[{"name":"user","description":"The member to remove from the list","optional":false,"type":[[["UserResolvable"]]]}],"returns":[[["Promise","<{"],["\nis","_"],["member",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `is_member` field","meta":{"line":76,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"setDescription","description":"Sets a new description for this list.","params":[{"name":"description","description":"The description to set","optional":false,"type":[[["string"]]]}],"returns":[[["Promise","<{"],["\nupdated",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `updated` field","meta":{"line":126,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"setName","description":"Sets a new name for this list.","params":[{"name":"name","description":"The name to set","optional":false,"type":[[["string"]]]}],"returns":[[["Promise","<{"],["\nupdated",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `updated` field","meta":{"line":117,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"setPrivate","description":"Sets the privacy of this list.","params":[{"name":"isPrivate","description":"Whether the list should be private","optional":false,"type":[[["boolean"]]]}],"returns":[[["Promise","<{"],["\nupdated",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `updated` field","meta":{"line":135,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"unfollow","description":"Unfollows this list.","returns":[[["Promise","<{"],["\nfollowing",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `following` field","meta":{"line":92,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"unpin","description":"Unpins this list.","returns":[[["Promise","<{"],["\npinned",": "],["false\n","}>"]]],"returnsDescription":"An object containing the `pinned` field","meta":{"line":108,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"update","description":"Updates this list.","params":[{"name":"options","description":"The options for updating the list","optional":false,"type":[[["Partial","<"],["CreateListOptions",">"]]]}],"returns":[[["Promise","<{"],["\nupdated",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `updated` field","meta":{"line":58,"file":"SimplifiedList.ts","path":"src/structures"}}],"meta":{"line":6,"file":"SimplifiedList.ts","path":"src/structures"}},{"name":"SimplifiedSpace","extends":["BaseStructure"],"construct":{"name":"constructor","params":[{"name":"client","optional":false,"type":[[["Client"]]]},{"name":"data","optional":false,"type":[[["APISpace"]]]}],"returns":[[["SimplifiedSpace"]]],"meta":{"line":85,"file":"SimplifiedSpace.ts","path":"src/structures"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseStructure.ts","path":"src/structures"}},{"name":"createdAt","description":"Creation time of this Space","type":[[["null"," | "],["Date"]]],"meta":{"line":15,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"creatorId","description":"The id of the user who created this space","type":[[["null"," | "],["string"]]],"meta":{"line":75,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"hostIds","description":"The unique identifier of the Users who are hosting this Space","type":[[["Array","<"],["string",">"]]],"meta":{"line":20,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"id","description":"The unique identifier of the strucutre","type":[[["string"]]],"meta":{"line":15,"file":"BaseStructure.ts","path":"src/structures"}},{"name":"invitedUserIds","description":"The list of user IDs that were invited to join as speakers.\nUsually, users in this list are invited to speak via the Invite user option","type":[[["Array","<"],["string",">"]]],"meta":{"line":36,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"isTicketed","description":"Indicates whether this is a ticketed Space","type":[[["null"," | "],["boolean"]]],"meta":{"line":30,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"lang","description":"Language of the Space, if detected by Twitter. Returned as a `BCP47` language tag","type":[[["null"," | "],["string"]]],"meta":{"line":25,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"participantCount","description":"The current number of users in the Space, including Hosts and Speakers","type":[[["null"," | "],["number"]]],"meta":{"line":41,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"scheduledStart","description":"Indicates the start time of a scheduled Space, as set by the creator of the Space.\nThis field is returned only if the Space has been scheduled; in other words,\nif the field is returned, it means the Space is a scheduled Space","type":[[["null"," | "],["Date"]]],"meta":{"line":48,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"speakerIds","description":"The list of users who were speaking at any point during the Space.\nThis list contains all the users in `invited_user_ids` in addition to\nany user who requested to speak and was allowed via the Add speaker option","type":[[["Array","<"],["string",">"]]],"meta":{"line":55,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"startedAt","description":"Indicates the actual start time of a Space","type":[[["null"," | "],["Date"]]],"meta":{"line":60,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"state","description":"Indicates if the Space has started or will start in the future, or if it has ended","type":[[["string"]]],"meta":{"line":10,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"subscriberCount","description":"The number of people who have either purchased a ticket or set a reminder for this space","type":[[["null"," | "],["number"]]],"meta":{"line":83,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"title","description":"The title of the Space as specified by the creator","type":[[["null"," | "],["string"]]],"meta":{"line":65,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"updatedAt","description":"Specifies the date and time of the last update to any of the Space's metadata, such as its title or scheduled time","type":[[["null"," | "],["Date"]]],"meta":{"line":70,"file":"SimplifiedSpace.ts","path":"src/structures"}}],"methods":[{"name":"fetchSharedTweets","description":"Fetches tweets shared in this space.","params":[{"name":"options","description":"An object containing optional parameters to apply","optional":true,"type":[[["FetchSpaceSharedTweetsOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Tweet",">>"]]],"returnsDescription":"A {@link Collection} of {@link Tweet}","meta":{"line":108,"file":"SimplifiedSpace.ts","path":"src/structures"}}],"meta":{"line":6,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"SimplifiedTweet","description":"A simplified version of {@link Tweet} class","extends":["BaseStructure"],"construct":{"name":"constructor","params":[{"name":"client","optional":false,"type":[[["Client"]]]},{"name":"data","optional":false,"type":[[["APITweet"]]]}],"returns":[[["SimplifiedTweet"]]],"meta":{"line":130,"file":"SimplifiedTweet.ts","path":"src/structures"}},"props":[{"name":"attachments","description":"The type of attachments (if any) present in the Tweet","type":[[["null"," | "],["TweetAttachments"]]],"meta":{"line":35,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"authorId","description":"The unique identifier of the User who posted the Tweet","type":[[["null"," | "],["string"]]],"meta":{"line":40,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseStructure.ts","path":"src/structures"}},{"name":"contextAnnotations","description":"Contains context annotations for the Tweet","type":[[["Array","<"],["TweetContextAnnotation",">"]]],"meta":{"line":45,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"conversationId","description":"The ID of the original Tweet of the conversation (which includes direct replies, replies of replies)","type":[[["null"," | "],["string"]]],"meta":{"line":50,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"createdAt","description":"The `ISO 8601` creation time of the Tweet","type":[[["null"," | "],["Date"]]],"meta":{"line":55,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"entities","description":"The entities which have been parsed out of the text of the Tweet","type":[[["null"," | "],["TweetEntities"]]],"meta":{"line":60,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"geo","description":"The details about the location tagged by the user in the Tweet, if they specified one","type":[[["null"," | "],["TweetGeo"]]],"meta":{"line":65,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"id","description":"The unique identifier of the strucutre","type":[[["string"]]],"meta":{"line":15,"file":"BaseStructure.ts","path":"src/structures"}},{"name":"inReplyToUserId","description":"If the Tweet is a reply, this field will contain the original Tweet’s author ID.\nThis will not necessarily always be the user directly mentioned in the Tweet","type":[[["null"," | "],["string"]]],"meta":{"line":71,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"lang","description":"The language of the Tweet, if detected by Twitter. Returned as a `BCP47` language tag","type":[[["null"," | "],["string"]]],"meta":{"line":76,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"nonPublicMetrics","description":"Non-public engagement metrics for the Tweet at the time of the request.\nRequires user context authentication","type":[[["null"," | "],["TweetNonPublicMetrics"]]],"meta":{"line":82,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"organicMetrics","description":"Engagement metrics tracked in an organic context for the Tweet at the time of the request.\nRequires user context authentication","type":[[["null"," | "],["TweetOrganicMetrics"]]],"meta":{"line":88,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"possiblySensitive","description":"This field only surfaces when a Tweet contains a link. The meaning of the field doesn’t pertain\nto the Tweet content itself, but instead it is an indicator that the URL contained in the Tweet\nmay contain content or media identified as sensitive content","type":[[["null"," | "],["boolean"]]],"meta":{"line":95,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"promotedMetrics","description":"Engagement metrics tracked in a promoted context for the Tweet at the time of the request.\nRequires user context authentication","type":[[["null"," | "],["TweetPromotedMetrics"]]],"meta":{"line":101,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"publicMetrics","description":"Public engagement metrics for the Tweet at the time of the request","type":[[["null"," | "],["TweetPublicMetrics"]]],"meta":{"line":106,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"referencedTweets","description":"A list of Tweets this Tweet refers to. It will also include the related Tweet referenced to by its parent","type":[[["Array","<"],["TweetReference",">"]]],"meta":{"line":111,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"replySettings","description":"Shows who can reply to the Tweet","type":[[["null"," | "],["APITweetReplySettings"]]],"meta":{"line":116,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"source","description":"The name of the app the user Tweeted from","type":[[["null"," | "],["string"]]],"meta":{"line":121,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"text","description":"The actual `UTF-8` text of the Tweet","type":[[["string"]]],"meta":{"line":30,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"withheld","description":"When present, contains withholding details for withheld content","type":[[["null"," | "],["TweetWithheld"]]],"meta":{"line":128,"file":"SimplifiedTweet.ts","path":"src/structures"}}],"methods":[{"name":"#patchReferencedTweets","description":"Converts raw tweet references data into desired shape to patch {@link SimplifiedTweet.referencedTweets} property","access":"private","params":[{"name":"rawTweetReferences","description":"The raw data for tweet references","optional":true,"type":[[["Array","<"],["APITweetReferencedTweet",">"]]]}],"returns":[[["Array","<"],["TweetReference",">"]]],"returnsDescription":"An array of {@link TweetReference} objects","meta":{"line":230,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"#patchTweetContextAnnotations","access":"private","params":[{"name":"rawContextAnnotations","optional":true,"type":[[["Array","<"],["APITweetContextAnnotation",">"]]]}],"returns":[[["Array","<"],["TweetContextAnnotation",">"]]],"meta":{"line":240,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"delete","description":"Deletes this tweet.","returns":[[["Promise","<{"],["\ndeleted",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `deleted` field","meta":{"line":221,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"hide","description":"Hides this tweet from the tweet replies section.","returns":[[["Promise","<{"],["\nhidden",": "],["boolean\n","}>"]]],"meta":{"line":172,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"like","description":"Likes this tweet.","returns":[[["Promise","<{"],["\nliked",": "],["boolean\n","}>"]]],"meta":{"line":156,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"quote","description":"Quotes this tweet","params":[{"name":"options","description":"The options for quoting","optional":false,"type":[[["TweetQuoteOptions"]]]}],"returns":[[["Promise","<{"],["\nid",": "],["string",","],["\ntext",": "],["string\n","}>"]]],"returnsDescription":"The created tweet","meta":{"line":213,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"reply","description":"Sends a reply to this tweet","params":[{"name":"options","description":"The options for the reply","optional":false,"type":[[["TweetReplyOptions"]]]}],"returns":[[["Promise","<{"],["\nid",": "],["string",","],["\ntext",": "],["string\n","}>"]]],"returnsDescription":"The created reply","meta":{"line":204,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"retweet","description":"Retweets this tweet.","returns":[[["Promise","<{"],["\nretweeted",": "],["boolean\n","}>"]]],"meta":{"line":188,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"unRetweet","description":"Removes the retweet of this tweet.","returns":[[["Promise","<{"],["\nretweeted",": "],["boolean\n","}>"]]],"meta":{"line":195,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"unhide","description":"Unhides this tweet.","returns":[[["Promise","<{"],["\nhidden",": "],["boolean\n","}>"]]],"meta":{"line":181,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"unlike","description":"Unlikes this tweet.","returns":[[["Promise","<{"],["\nliked",": "],["boolean\n","}>"]]],"meta":{"line":163,"file":"SimplifiedTweet.ts","path":"src/structures"}}],"meta":{"line":26,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"SimplifiedUser","description":"A simplified version of {@link User} class","extends":["BaseStructure"],"construct":{"name":"constructor","params":[{"name":"client","optional":false,"type":[[["Client"]]]},{"name":"data","optional":false,"type":[[["APIUser"]]]}],"returns":[[["SimplifiedUser"]]],"meta":{"line":88,"file":"SimplifiedUser.ts","path":"src/structures"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseStructure.ts","path":"src/structures"}},{"name":"createdAt","description":"The UTC datetime that the user account was created on Twitter","type":[[["null"," | "],["Date"]]],"meta":{"line":34,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"description","description":"The text of this user's profile description (also known as bio), if the user provided one","type":[[["null"," | "],["string"]]],"meta":{"line":39,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"entities","description":"Contains details about text that has a special meaning in the user's description","type":[[["null"," | "],["UserEntities"]]],"meta":{"line":44,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"id","description":"The unique identifier of the strucutre","type":[[["string"]]],"meta":{"line":15,"file":"BaseStructure.ts","path":"src/structures"}},{"name":"location","description":"The location specified in the user's profile, if the user provided one. As this is a freeform value,\nit may not indicate a valid location, but it may be fuzzily evaluated when performing searches with\nlocation queries","type":[[["null"," | "],["string"]]],"meta":{"line":51,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"name","description":"The name of the user, as they’ve defined it on their profile. Not necessarily a person’s name.\nTypically capped at `50` characters, but subject to change","type":[[["string"]]],"meta":{"line":22,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"pinnedTweetId","description":"The unique identifier of this user's pinned Tweet","type":[[["null"," | "],["string"]]],"meta":{"line":56,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"profileImageURL","description":"The URL to the profile image for this user, as shown on the user's profile","type":[[["null"," | "],["string"]]],"meta":{"line":61,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"protected","description":"Indicates if this user has chosen to protect their Tweets (in other words, if this user's Tweets are private)","type":[[["null"," | "],["boolean"]]],"meta":{"line":66,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"publicMetrics","description":"Contains details about activity for this user","type":[[["null"," | "],["UserPublicMetrics"]]],"meta":{"line":71,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"url","description":"The URL specified in the user's profile, if present","type":[[["null"," | "],["string"]]],"meta":{"line":76,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"username","description":"The Twitter screen name, handle, or alias that this user identifies themselves with. Usernames are unique but\nsubject to change. Typically a maximum of `15` characters long, but some historical accounts may exist with longer\nnames","type":[[["string"]]],"meta":{"line":29,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"verified","description":"Indicates if this user is a verified Twitter User","type":[[["null"," | "],["boolean"]]],"meta":{"line":81,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"withheld","description":"Contains withholding details for withheld content, if applicable","type":[[["null"," | "],["UserWitheld"]]],"meta":{"line":86,"file":"SimplifiedUser.ts","path":"src/structures"}}],"methods":[{"name":"block","description":"Blocks this user on twitter.","returns":[[["Promise","<{"],["\nblocking",": "],["boolean\n","}>"]]],"meta":{"line":123,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"follow","description":"Follows this user on twitter.","returns":[[["Promise","<{"],["\nfollowing",": "],["boolean",","],["\npending","_"],["follow",": "],["boolean\n","}>"]]],"meta":{"line":109,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"mute","description":"Mutes this user on twitter.","returns":[[["Promise","<{"],["\nmuting",": "],["boolean\n","}>"]]],"meta":{"line":137,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"unblock","description":"Unblocks this user on twitter.","returns":[[["Promise","<{"],["\nblocking",": "],["boolean\n","}>"]]],"meta":{"line":130,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"unfollow","description":"Unfollows this user on twitter.","returns":[[["Promise","<{"],["\nfollowing",": "],["boolean\n","}>"]]],"meta":{"line":116,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"unmute","description":"Unmutes this user on twitter.","returns":[[["Promise","<{"],["\nmuting",": "],["boolean\n","}>"]]],"meta":{"line":144,"file":"SimplifiedUser.ts","path":"src/structures"}}],"meta":{"line":17,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"Space","extends":["SimplifiedSpace"],"construct":{"name":"constructor","params":[{"name":"client","optional":false,"type":[[["Client"]]]},{"name":"data","optional":false,"type":[[["SingleSpaceLookupResponse"]]]}],"returns":[[["Space"]]],"meta":{"line":6,"file":"Space.ts","path":"src/structures"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseStructure.ts","path":"src/structures"}},{"name":"createdAt","description":"Creation time of this Space","type":[[["null"," | "],["Date"]]],"meta":{"line":15,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"creatorId","description":"The id of the user who created this space","type":[[["null"," | "],["string"]]],"meta":{"line":75,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"hostIds","description":"The unique identifier of the Users who are hosting this Space","type":[[["Array","<"],["string",">"]]],"meta":{"line":20,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"id","description":"The unique identifier of the strucutre","type":[[["string"]]],"meta":{"line":15,"file":"BaseStructure.ts","path":"src/structures"}},{"name":"invitedUserIds","description":"The list of user IDs that were invited to join as speakers.\nUsually, users in this list are invited to speak via the Invite user option","type":[[["Array","<"],["string",">"]]],"meta":{"line":36,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"isTicketed","description":"Indicates whether this is a ticketed Space","type":[[["null"," | "],["boolean"]]],"meta":{"line":30,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"lang","description":"Language of the Space, if detected by Twitter. Returned as a `BCP47` language tag","type":[[["null"," | "],["string"]]],"meta":{"line":25,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"participantCount","description":"The current number of users in the Space, including Hosts and Speakers","type":[[["null"," | "],["number"]]],"meta":{"line":41,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"scheduledStart","description":"Indicates the start time of a scheduled Space, as set by the creator of the Space.\nThis field is returned only if the Space has been scheduled; in other words,\nif the field is returned, it means the Space is a scheduled Space","type":[[["null"," | "],["Date"]]],"meta":{"line":48,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"speakerIds","description":"The list of users who were speaking at any point during the Space.\nThis list contains all the users in `invited_user_ids` in addition to\nany user who requested to speak and was allowed via the Add speaker option","type":[[["Array","<"],["string",">"]]],"meta":{"line":55,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"startedAt","description":"Indicates the actual start time of a Space","type":[[["null"," | "],["Date"]]],"meta":{"line":60,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"state","description":"Indicates if the Space has started or will start in the future, or if it has ended","type":[[["string"]]],"meta":{"line":10,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"subscriberCount","description":"The number of people who have either purchased a ticket or set a reminder for this space","type":[[["null"," | "],["number"]]],"meta":{"line":83,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"title","description":"The title of the Space as specified by the creator","type":[[["null"," | "],["string"]]],"meta":{"line":65,"file":"SimplifiedSpace.ts","path":"src/structures"}},{"name":"updatedAt","description":"Specifies the date and time of the last update to any of the Space's metadata, such as its title or scheduled time","type":[[["null"," | "],["Date"]]],"meta":{"line":70,"file":"SimplifiedSpace.ts","path":"src/structures"}}],"methods":[{"name":"fetchSharedTweets","description":"Fetches tweets shared in this space.","params":[{"name":"options","description":"An object containing optional parameters to apply","optional":true,"type":[[["FetchSpaceSharedTweetsOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Tweet",">>"]]],"returnsDescription":"A {@link Collection} of {@link Tweet}","meta":{"line":108,"file":"SimplifiedSpace.ts","path":"src/structures"}}],"meta":{"line":5,"file":"Space.ts","path":"src/structures"}},{"name":"SpaceManager","description":"The manager class that holds API methods for {@link Space} objects and stores their cache","extends":["BaseManager<string, SpaceResolvable, Space>"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]}],"returns":[[["SpaceManager"]]],"meta":{"line":27,"file":"SpaceManager.ts","path":"src/managers"}},"props":[{"name":"#holds","description":"The structure that this manager stores in its cache","access":"private","type":[[["StructureConstructable","<"],["Space",">"]]],"meta":{"line":21,"file":"BaseManager.ts","path":"src/managers"}},{"name":"cache","description":"The cache of the structures held by this manager","type":[[["Collection","<"],["string",", "],["Space",">"]]],"meta":{"line":16,"file":"BaseManager.ts","path":"src/managers"}},{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":11,"file":"BaseManager.ts","path":"src/managers"}}],"methods":[{"name":"#fetchMultipleSpacesByIds","description":"Fetches multiple spaces using their ids.","access":"private","params":[{"name":"spaceIds","description":"The ids of the spaces to fetch","optional":false,"type":[[["Array","<"],["string",">"]]]},{"name":"options","description":"An object containing optional parameters to apply","optional":true,"type":[[["FetchSpacesOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Space",">>"]]],"returnsDescription":"A {@link Collection} of {@link Space}","meta":{"line":218,"file":"SpaceManager.ts","path":"src/managers"}},{"name":"#fetchSingleSpaceById","description":"Fetches a single space using its id.","access":"private","params":[{"name":"spaceId","description":"The id of the space to fetch","optional":false,"type":[[["string"]]]},{"name":"options","description":"An object containing optional parameters to apply","optional":true,"type":[[["BaseFetchOptions"]]]}],"returns":[[["Promise","<"],["Space",">"]]],"returnsDescription":"A {@link Space}","meta":{"line":196,"file":"SpaceManager.ts","path":"src/managers"}},{"name":"fetch","description":"Fetches one or more spaces.","see":[],"examples":["const space = await client.spaces.fetch('1OdJrBwXgjXJX');"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"spaceOrSpaces","description":"The space or spaces to fetch","optional":false,"type":[[["S"]]]},{"name":"options","description":"An object containing optional parameters to apply","optional":true,"type":[[["FetchSpaceOrSpacesOptions","<"],["S",">"]]]}],"returns":[[["Promise","<"],["SpaceManagerFetchResult","<"],["S",">>"]]],"returnsDescription":"A {@link Space} or a {@link Collection} of them","meta":{"line":39,"file":"SpaceManager.ts","path":"src/managers"}},{"name":"fetchByCreators","description":"Fetches live or scheduled spaces created by a user or users.","see":[],"examples":["// Fetch live or scheduled spaces created by a user\nconst spaces = await client.spaces.fetchByCreators('1253316035878375424');\n\n// Fetch live or scheduled spaces created by multiple users\nconst spaces = await client.spaces.fetchByCreators(['1253316035878375424', '6253282']);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"creatorOrCreators","description":"The user or users whose created live or scheduled spaces are to be fetched","optional":false,"type":[[["UserResolvable"," | "],["Array","<"],["UserResolvable",">"]]]},{"name":"options","description":"An object containing optional parameters to apply","optional":true,"type":[[["FetchSpacesByCreatorsOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Space",">>"]]],"returnsDescription":"A {@link Collection} of {@link Space}","meta":{"line":70,"file":"SpaceManager.ts","path":"src/managers"}},{"name":"fetchSharedTweets","description":"Fetches tweets shared in a space.","see":[],"examples":["const tweets = await client.spaces.fetchSharedTweets('1DXxyRYNejbKM');"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"space","description":"The space whose shared tweets are to be fetched","optional":false,"type":[[["SpaceResolvable"]]]},{"name":"options","description":"An object containing optional parameters to apply","optional":true,"type":[[["FetchSpaceSharedTweetsOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Tweet",">>"]]],"returnsDescription":"A {@link Collection} of {@link Tweet}","meta":{"line":157,"file":"SpaceManager.ts","path":"src/managers"}},{"name":"resolve","description":"Resolves a structure resolvable to its respective structure.","params":[{"name":"idOrInstance","description":"The ID or instance of the structure held by this manager","optional":false,"type":[[["SpaceResolvable"]]]}],"returns":[[["null"," | "],["Space"]]],"meta":{"line":38,"file":"BaseManager.ts","path":"src/managers"}},{"name":"resolveId","description":"Resolves a structure resolvable to its id.","params":[{"name":"idOrInstance","description":"The ID or instance of the strucutre held by this manager","optional":false,"type":[[["SpaceResolvable"]]]}],"returns":[[["null"," | "],["string"]]],"meta":{"line":48,"file":"BaseManager.ts","path":"src/managers"}},{"name":"search","description":"Fetches spaces using search query.","see":[],"examples":["// Fetch all the spaces that have the term \"Twitter\" in their title\nconst spaces = await client.spaces.search('Twitter');\n\n// Fetch all the live spaces that have the term \"Twitter\" in their title\nconst spaces = await client.spaces.search('Twitter', { state: 'live' });"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"queryString","description":"Any text (including mentions and hashtags) present in the title of the spaces to fetch","optional":false,"type":[[["string"]]]},{"name":"options","description":"An object containing optional parameters to apply","optional":true,"type":[[["SearchSpacesOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Space",">>"]]],"returnsDescription":"A {@link Collection} of {@link Space}","meta":{"line":122,"file":"SpaceManager.ts","path":"src/managers"}}],"meta":{"line":23,"file":"SpaceManager.ts","path":"src/managers"}},{"name":"SpaceTicketBuyersBook","description":"A class for fetching users who purchased a ticket for a space","extends":["BaseBook"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]},{"name":"options","description":"The options to initialize the book with","optional":false,"type":[[["SpaceTicketBuyersBookOptions"]]]}],"returns":[[["SpaceTicketBuyersBook"]]],"meta":{"line":22,"file":"SpaceTicketBuyersBook.ts","path":"src/books"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseBook.ts","path":"src/books"}},{"name":"hasMore","description":"Whether there are more pages of tweets to be fetched","type":[[["boolean"]]],"meta":{"line":44,"file":"BaseBook.ts","path":"src/books"}},{"name":"maxResultsPerPage","description":"The maximum amount of tweets that will be fetched per page.","type":[[["null"," | "],["number"]]],"meta":{"line":37,"file":"BaseBook.ts","path":"src/books"}},{"name":"spaceId","description":"The Id of the space this book belongs to","type":[[["string"]]],"meta":{"line":16,"file":"SpaceTicketBuyersBook.ts","path":"src/books"}}],"methods":[{"name":"#fetchPages","access":"private","params":[{"name":"token","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"meta":{"line":51,"file":"SpaceTicketBuyersBook.ts","path":"src/books"}},{"name":"fetchNextPage","description":"Fetches the next page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"returnsDescription":"A {@link Collection} of {@link User} who purchased a ticket for the Space","meta":{"line":33,"file":"SpaceTicketBuyersBook.ts","path":"src/books"}},{"name":"fetchPreviousPage","description":"Fetches the previous page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"returnsDescription":"A {@link Collection} of {@link User} who purchased a ticket for the Space","meta":{"line":46,"file":"SpaceTicketBuyersBook.ts","path":"src/books"}}],"meta":{"line":12,"file":"SpaceTicketBuyersBook.ts","path":"src/books"}},{"name":"Tweet","description":"The class that represents a tweet on Twitter","extends":["SimplifiedTweet"],"construct":{"name":"constructor","params":[{"name":"client","optional":false,"type":[[["Client"]]]},{"name":"data","optional":false,"type":[[["SingleTweetLookupResponse"]]]}],"returns":[[["Tweet"]]],"meta":{"line":57,"file":"Tweet.ts","path":"src/structures"}},"props":[{"name":"attachments","description":"The type of attachments (if any) present in the Tweet","type":[[["null"," | "],["TweetAttachments"]]],"meta":{"line":35,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"author","description":"The author of the tweet","type":[[["null"," | "],["SimplifiedUser"]]],"meta":{"line":25,"file":"Tweet.ts","path":"src/structures"}},{"name":"authorId","description":"The unique identifier of the User who posted the Tweet","type":[[["null"," | "],["string"]]],"meta":{"line":40,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseStructure.ts","path":"src/structures"}},{"name":"contextAnnotations","description":"Contains context annotations for the Tweet","type":[[["Array","<"],["TweetContextAnnotation",">"]]],"meta":{"line":45,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"conversationId","description":"The ID of the original Tweet of the conversation (which includes direct replies, replies of replies)","type":[[["null"," | "],["string"]]],"meta":{"line":50,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"createdAt","description":"The `ISO 8601` creation time of the Tweet","type":[[["null"," | "],["Date"]]],"meta":{"line":55,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"entities","description":"The entities which have been parsed out of the text of the Tweet","type":[[["null"," | "],["TweetEntities"]]],"meta":{"line":60,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"geo","description":"The details about the location tagged by the user in the Tweet, if they specified one","type":[[["null"," | "],["TweetGeo"]]],"meta":{"line":65,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"id","description":"The unique identifier of the strucutre","type":[[["string"]]],"meta":{"line":15,"file":"BaseStructure.ts","path":"src/structures"}},{"name":"inReplyToUserId","description":"If the Tweet is a reply, this field will contain the original Tweet’s author ID.\nThis will not necessarily always be the user directly mentioned in the Tweet","type":[[["null"," | "],["string"]]],"meta":{"line":71,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"lang","description":"The language of the Tweet, if detected by Twitter. Returned as a `BCP47` language tag","type":[[["null"," | "],["string"]]],"meta":{"line":76,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"media","description":"The media contents in the tweet","type":[[["Collection","<"],["string",", "],["Media",">"]]],"meta":{"line":55,"file":"Tweet.ts","path":"src/structures"}},{"name":"mentions","description":"The users mentioned in the tweet","type":[[["Collection","<"],["string",", "],["SimplifiedUser",">"]]],"meta":{"line":30,"file":"Tweet.ts","path":"src/structures"}},{"name":"nonPublicMetrics","description":"Non-public engagement metrics for the Tweet at the time of the request.\nRequires user context authentication","type":[[["null"," | "],["TweetNonPublicMetrics"]]],"meta":{"line":82,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"organicMetrics","description":"Engagement metrics tracked in an organic context for the Tweet at the time of the request.\nRequires user context authentication","type":[[["null"," | "],["TweetOrganicMetrics"]]],"meta":{"line":88,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"places","description":"The places tagged in the tweet","type":[[["Collection","<"],["string",", "],["Place",">"]]],"meta":{"line":50,"file":"Tweet.ts","path":"src/structures"}},{"name":"polls","description":"The polls in the tweet","type":[[["Collection","<"],["string",", "],["Poll",">"]]],"meta":{"line":45,"file":"Tweet.ts","path":"src/structures"}},{"name":"possiblySensitive","description":"This field only surfaces when a Tweet contains a link. The meaning of the field doesn’t pertain\nto the Tweet content itself, but instead it is an indicator that the URL contained in the Tweet\nmay contain content or media identified as sensitive content","type":[[["null"," | "],["boolean"]]],"meta":{"line":95,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"promotedMetrics","description":"Engagement metrics tracked in a promoted context for the Tweet at the time of the request.\nRequires user context authentication","type":[[["null"," | "],["TweetPromotedMetrics"]]],"meta":{"line":101,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"publicMetrics","description":"Public engagement metrics for the Tweet at the time of the request","type":[[["null"," | "],["TweetPublicMetrics"]]],"meta":{"line":106,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"quoted","description":"The original tweet if this tweet is a quote","type":[[["null"," | "],["SimplifiedTweet"]]],"meta":{"line":40,"file":"Tweet.ts","path":"src/structures"}},{"name":"referencedTweets","description":"A list of Tweets this Tweet refers to. It will also include the related Tweet referenced to by its parent","type":[[["Array","<"],["TweetReference",">"]]],"meta":{"line":111,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"repliedTo","description":"The original tweet if this tweet is a reply","type":[[["null"," | "],["SimplifiedTweet"]]],"meta":{"line":35,"file":"Tweet.ts","path":"src/structures"}},{"name":"replySettings","description":"Shows who can reply to the Tweet","type":[[["null"," | "],["APITweetReplySettings"]]],"meta":{"line":116,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"source","description":"The name of the app the user Tweeted from","type":[[["null"," | "],["string"]]],"meta":{"line":121,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"text","description":"The actual `UTF-8` text of the Tweet","type":[[["string"]]],"meta":{"line":30,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"withheld","description":"When present, contains withholding details for withheld content","type":[[["null"," | "],["TweetWithheld"]]],"meta":{"line":128,"file":"SimplifiedTweet.ts","path":"src/structures"}}],"methods":[{"name":"#patchAuthor","access":"private","params":[{"name":"users","optional":true,"type":[[["Array","<"],["APIUser",">"]]]}],"returns":[[["undefined"," | "],["SimplifiedUser"]]],"meta":{"line":69,"file":"Tweet.ts","path":"src/structures"}},{"name":"#patchMedia","access":"private","params":[{"name":"rawMediaContents","optional":true,"type":[[["Array","<"],["APIMedia",">"]]]}],"returns":[[["Collection","<"],["string",", "],["Media",">"]]],"meta":{"line":120,"file":"Tweet.ts","path":"src/structures"}},{"name":"#patchMentions","access":"private","params":[{"name":"users","optional":true,"type":[[["Array","<"],["APIUser",">"]]]}],"returns":[[["Collection","<"],["string",", "],["SimplifiedUser",">"]]],"meta":{"line":76,"file":"Tweet.ts","path":"src/structures"}},{"name":"#patchPlaces","access":"private","params":[{"name":"rawPlaces","optional":true,"type":[[["Array","<"],["APIPlace",">"]]]}],"returns":[[["Collection","<"],["string",", "],["Place",">"]]],"meta":{"line":110,"file":"Tweet.ts","path":"src/structures"}},{"name":"#patchPolls","access":"private","params":[{"name":"rawPolls","optional":true,"type":[[["Array","<"],["APIPoll",">"]]]}],"returns":[[["Collection","<"],["string",", "],["Poll",">"]]],"meta":{"line":100,"file":"Tweet.ts","path":"src/structures"}},{"name":"#patchReferencedTweets","description":"Converts raw tweet references data into desired shape to patch {@link SimplifiedTweet.referencedTweets} property","access":"private","params":[{"name":"rawTweetReferences","description":"The raw data for tweet references","optional":true,"type":[[["Array","<"],["APITweetReferencedTweet",">"]]]}],"returns":[[["Array","<"],["TweetReference",">"]]],"returnsDescription":"An array of {@link TweetReference} objects","meta":{"line":230,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"#patchTweetContextAnnotations","access":"private","params":[{"name":"rawContextAnnotations","optional":true,"type":[[["Array","<"],["APITweetContextAnnotation",">"]]]}],"returns":[[["Array","<"],["TweetContextAnnotation",">"]]],"meta":{"line":240,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"#patchTweetReferences","access":"private","params":[{"name":"referenceType","optional":false,"type":[[["APITweetReferencedTweetType"]]]},{"name":"tweets","optional":true,"type":[[["Array","<"],["APITweet",">"]]]}],"returns":[[["undefined"," | "],["SimplifiedTweet"]]],"meta":{"line":89,"file":"Tweet.ts","path":"src/structures"}},{"name":"delete","description":"Deletes this tweet.","returns":[[["Promise","<{"],["\ndeleted",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `deleted` field","meta":{"line":221,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"hide","description":"Hides this tweet from the tweet replies section.","returns":[[["Promise","<{"],["\nhidden",": "],["boolean\n","}>"]]],"meta":{"line":172,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"like","description":"Likes this tweet.","returns":[[["Promise","<{"],["\nliked",": "],["boolean\n","}>"]]],"meta":{"line":156,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"quote","description":"Quotes this tweet","params":[{"name":"options","description":"The options for quoting","optional":false,"type":[[["TweetQuoteOptions"]]]}],"returns":[[["Promise","<{"],["\nid",": "],["string",","],["\ntext",": "],["string\n","}>"]]],"returnsDescription":"The created tweet","meta":{"line":213,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"reply","description":"Sends a reply to this tweet","params":[{"name":"options","description":"The options for the reply","optional":false,"type":[[["TweetReplyOptions"]]]}],"returns":[[["Promise","<{"],["\nid",": "],["string",","],["\ntext",": "],["string\n","}>"]]],"returnsDescription":"The created reply","meta":{"line":204,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"retweet","description":"Retweets this tweet.","returns":[[["Promise","<{"],["\nretweeted",": "],["boolean\n","}>"]]],"meta":{"line":188,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"unRetweet","description":"Removes the retweet of this tweet.","returns":[[["Promise","<{"],["\nretweeted",": "],["boolean\n","}>"]]],"meta":{"line":195,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"unhide","description":"Unhides this tweet.","returns":[[["Promise","<{"],["\nhidden",": "],["boolean\n","}>"]]],"meta":{"line":181,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"unlike","description":"Unlikes this tweet.","returns":[[["Promise","<{"],["\nliked",": "],["boolean\n","}>"]]],"meta":{"line":163,"file":"SimplifiedTweet.ts","path":"src/structures"}}],"meta":{"line":21,"file":"Tweet.ts","path":"src/structures"}},{"name":"TweetAnnotationEntity","extends":["TweetBaseEntity"],"construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APITweetAnnotationEntity"]]]}],"returns":[[["TweetAnnotationEntity"]]],"meta":{"line":92,"file":"TweetEntities.ts","path":"src/structures/misc"}},"props":[{"name":"end","type":[[["number"]]],"meta":{"line":79,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"normalizedText","type":[[["string"]]],"meta":{"line":90,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"probability","type":[[["number"]]],"meta":{"line":88,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"start","type":[[["number"]]],"meta":{"line":78,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"type","type":[[["string"]]],"meta":{"line":89,"file":"TweetEntities.ts","path":"src/structures/misc"}}],"meta":{"line":87,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"TweetAttachments","construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APITweetAttachments"]]]}],"returns":[[["TweetAttachments"]]],"meta":{"line":76,"file":"Miscellaneous.ts","path":"src/structures/misc"}},"props":[{"name":"mediaKeys","type":[[["Array","<"],["string",">"]]],"meta":{"line":73,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"pollIds","type":[[["Array","<"],["string",">"]]],"meta":{"line":74,"file":"Miscellaneous.ts","path":"src/structures/misc"}}],"meta":{"line":72,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"TweetBaseEntity","construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APITweetBaseEntity"]]]}],"returns":[[["TweetBaseEntity"]]],"meta":{"line":81,"file":"TweetEntities.ts","path":"src/structures/misc"}},"props":[{"name":"end","type":[[["number"]]],"meta":{"line":79,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"start","type":[[["number"]]],"meta":{"line":78,"file":"TweetEntities.ts","path":"src/structures/misc"}}],"meta":{"line":77,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"TweetCashtagEntity","extends":["TweetBaseEntity"],"construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APITweetCashtagEntity"]]]}],"returns":[[["TweetCashtagEntity"]]],"meta":{"line":103,"file":"TweetEntities.ts","path":"src/structures/misc"}},"props":[{"name":"end","type":[[["number"]]],"meta":{"line":79,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"start","type":[[["number"]]],"meta":{"line":78,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"tag","type":[[["string"]]],"meta":{"line":101,"file":"TweetEntities.ts","path":"src/structures/misc"}}],"meta":{"line":100,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"TweetContextAnnotation","construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APITweetContextAnnotation"]]]}],"returns":[[["TweetContextAnnotation"]]],"meta":{"line":11,"file":"TweetContextAnnotation.ts","path":"src/structures/misc"}},"props":[{"name":"domain","type":[[["TweetContextAnnotationDomain"]]],"meta":{"line":8,"file":"TweetContextAnnotation.ts","path":"src/structures/misc"}},{"name":"entity","type":[[["TweetContextAnnotationEntity"]]],"meta":{"line":9,"file":"TweetContextAnnotation.ts","path":"src/structures/misc"}}],"meta":{"line":7,"file":"TweetContextAnnotation.ts","path":"src/structures/misc"}},{"name":"TweetContextAnnotationDomain","construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APITweetContextAnnotationDomain"]]]}],"returns":[[["TweetContextAnnotationDomain"]]],"meta":{"line":22,"file":"TweetContextAnnotation.ts","path":"src/structures/misc"}},"props":[{"name":"description","type":[[["string"]]],"meta":{"line":20,"file":"TweetContextAnnotation.ts","path":"src/structures/misc"}},{"name":"id","type":[[["string"]]],"meta":{"line":18,"file":"TweetContextAnnotation.ts","path":"src/structures/misc"}},{"name":"name","type":[[["string"]]],"meta":{"line":19,"file":"TweetContextAnnotation.ts","path":"src/structures/misc"}}],"meta":{"line":17,"file":"TweetContextAnnotation.ts","path":"src/structures/misc"}},{"name":"TweetContextAnnotationEntity","extends":["TweetContextAnnotationDomain"],"construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APITweetContextAnnotationEntity"]]]}],"returns":[[["TweetContextAnnotationEntity"]]],"meta":{"line":30,"file":"TweetContextAnnotation.ts","path":"src/structures/misc"}},"props":[{"name":"description","type":[[["string"]]],"meta":{"line":20,"file":"TweetContextAnnotation.ts","path":"src/structures/misc"}},{"name":"id","type":[[["string"]]],"meta":{"line":18,"file":"TweetContextAnnotation.ts","path":"src/structures/misc"}},{"name":"name","type":[[["string"]]],"meta":{"line":19,"file":"TweetContextAnnotation.ts","path":"src/structures/misc"}}],"meta":{"line":29,"file":"TweetContextAnnotation.ts","path":"src/structures/misc"}},{"name":"TweetCountBucket","construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["{"],["\nend",": "],["string",","],["\nstart",": "],["string",","],["\ntweet","_"],["count",": "],["number\n","}"]]]},{"name":"granularity","optional":false,"type":[[["undefined"," | "],["null"," | "],["'minute'"," | "],["'hour'"," | "],["'day'"]]]}],"returns":[[["TweetCountBucket"]]],"meta":{"line":223,"file":"Miscellaneous.ts","path":"src/structures/misc"}},"props":[{"name":"count","description":"The number of tweets created between start and end time that matched with the query","type":[[["number"]]],"meta":{"line":216,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"end","description":"The end time of the bucket","type":[[["Date"]]],"meta":{"line":211,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"granularity","description":"The timespan between start and end time of this bucket","type":[[["undefined"," | "],["'minute'"," | "],["'hour'"," | "],["'day'"]]],"meta":{"line":221,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"start","description":"The start time of the bucket","type":[[["Date"]]],"meta":{"line":206,"file":"Miscellaneous.ts","path":"src/structures/misc"}}],"meta":{"line":202,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"TweetEntities","construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APITweetEntities"]]]}],"returns":[[["TweetEntities"]]],"meta":{"line":18,"file":"TweetEntities.ts","path":"src/structures/misc"}},"props":[{"name":"annotations","type":[[["Array","<"],["TweetAnnotationEntity",">"]]],"meta":{"line":12,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"cashtags","type":[[["Array","<"],["TweetCashtagEntity",">"]]],"meta":{"line":13,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"hashtags","type":[[["Array","<"],["TweetHashtagEntity",">"]]],"meta":{"line":14,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"mentions","type":[[["Array","<"],["TweetMentionEntity",">"]]],"meta":{"line":15,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"urls","type":[[["Array","<"],["TweetURLEntity",">"]]],"meta":{"line":16,"file":"TweetEntities.ts","path":"src/structures/misc"}}],"methods":[{"name":"#patchAnnotations","access":"private","params":[{"name":"rawTweetAnnotations","optional":true,"type":[[["Array","<"],["APITweetAnnotationEntity",">"]]]}],"returns":[[["Array","<"],["TweetAnnotationEntity",">"]]],"meta":{"line":26,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"#patchCashtags","access":"private","params":[{"name":"rawTweetCashtags","optional":true,"type":[[["Array","<"],["APITweetCashtagEntity",">"]]]}],"returns":[[["Array","<"],["TweetCashtagEntity",">"]]],"meta":{"line":36,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"#patchHashtags","access":"private","params":[{"name":"rawTweetHashtags","optional":true,"type":[[["Array","<"],["APITweetHashtagEntity",">"]]]}],"returns":[[["Array","<"],["TweetHashtagEntity",">"]]],"meta":{"line":46,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"#patchMentions","access":"private","params":[{"name":"rawTweetMentions","optional":true,"type":[[["Array","<"],["APITweetMentionEntity",">"]]]}],"returns":[[["Array","<"],["TweetMentionEntity",">"]]],"meta":{"line":56,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"#patchUrls","access":"private","params":[{"name":"rawTweetUrls","optional":true,"type":[[["Array","<"],["APITweetURLEntity",">"]]]}],"returns":[[["Array","<"],["TweetURLEntity",">"]]],"meta":{"line":66,"file":"TweetEntities.ts","path":"src/structures/misc"}}],"meta":{"line":11,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"TweetGeo","construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APITweetGeo"]]]}],"returns":[[["TweetGeo"]]],"meta":{"line":104,"file":"Miscellaneous.ts","path":"src/structures/misc"}},"props":[{"name":"coordinates","type":[[["null"," | "],["TweetGeoCoordinates"]]],"meta":{"line":102,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"placeId","type":[[["string"]]],"meta":{"line":100,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"type","type":[[["null"," | "],["'Point'"]]],"meta":{"line":101,"file":"Miscellaneous.ts","path":"src/structures/misc"}}],"meta":{"line":99,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"TweetGeoCoordinates","construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APITweetGeoCoordinates"]]]}],"returns":[[["TweetGeoCoordinates"]]],"meta":{"line":115,"file":"Miscellaneous.ts","path":"src/structures/misc"}},"props":[{"name":"latitude","type":[[["null"," | "],["number"]]],"meta":{"line":112,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"longitude","type":[[["null"," | "],["number"]]],"meta":{"line":113,"file":"Miscellaneous.ts","path":"src/structures/misc"}}],"meta":{"line":111,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"TweetHashtagEntity","extends":["TweetBaseEntity"],"construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APITweetHashtagEntity"]]]}],"returns":[[["TweetHashtagEntity"]]],"meta":{"line":112,"file":"TweetEntities.ts","path":"src/structures/misc"}},"props":[{"name":"end","type":[[["number"]]],"meta":{"line":79,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"start","type":[[["number"]]],"meta":{"line":78,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"tag","type":[[["string"]]],"meta":{"line":110,"file":"TweetEntities.ts","path":"src/structures/misc"}}],"meta":{"line":109,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"TweetManager","description":"The manager class that holds API methods for {@link Tweet} objects and stores their cache","extends":["BaseManager<string, TweetResolvable, Tweet>"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]}],"returns":[[["TweetManager"]]],"meta":{"line":32,"file":"TweetManager.ts","path":"src/managers"}},"props":[{"name":"#holds","description":"The structure that this manager stores in its cache","access":"private","type":[[["StructureConstructable","<"],["Tweet",">"]]],"meta":{"line":21,"file":"BaseManager.ts","path":"src/managers"}},{"name":"cache","description":"The cache of the structures held by this manager","type":[[["Collection","<"],["string",", "],["Tweet",">"]]],"meta":{"line":16,"file":"BaseManager.ts","path":"src/managers"}},{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":11,"file":"BaseManager.ts","path":"src/managers"}}],"methods":[{"name":"#editTweetReplyVisibility","description":"Change the visibility of a reply to a tweet of the authorized user.","access":"private","params":[{"name":"tweet","description":"The tweet to hide or unhide","optional":false,"type":[[["TweetResolvable"]]]},{"name":"visibility","description":"The visibility to set","optional":false,"type":[[["'hidden'"," | "],["'unhidden'"]]]}],"returns":[[["Promise","<{"],["\nhidden",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `hidden` field","meta":{"line":297,"file":"TweetManager.ts","path":"src/managers"}},{"name":"#fetchMultipleTweetsByIds","description":"Fetches multiple tweets using their ids.","access":"private","params":[{"name":"tweetIds","description":"The ids of the tweets to fetch","optional":false,"type":[[["Array","<"],["string",">"]]]},{"name":"options","description":"An object containing optional parameters to apply","optional":true,"type":[[["FetchTweetsOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Tweet",">>"]]],"returnsDescription":"A {@link Collection} of {@link Tweet}","meta":{"line":261,"file":"TweetManager.ts","path":"src/managers"}},{"name":"#fetchSingleTweetById","description":"Fetches a single tweet using its id.","access":"private","params":[{"name":"tweetId","description":"The id of the tweet to fetch","optional":false,"type":[[["string"]]]},{"name":"options","description":"An object containing optional parameters to apply","optional":true,"type":[[["BaseFetchOptions"]]]}],"returns":[[["Promise","<"],["Tweet",">"]]],"returnsDescription":"A {@link Tweet}","meta":{"line":236,"file":"TweetManager.ts","path":"src/managers"}},{"name":"create","description":"Creates a new tweet.","see":[],"examples":["const data = await client.tweets.create({ text: 'This is a tweet' });\nconsole.log(data); // { id: '1487382074546089985', text: 'This is a tweet' }"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"options","description":"The options for creating the tweet","optional":false,"type":[[["TweetCreateOptions"]]]}],"returns":[[["Promise","<{"],["\nid",": "],["string",","],["\ntext",": "],["string\n","}>"]]],"returnsDescription":"The id and text of the created tweet","meta":{"line":207,"file":"TweetManager.ts","path":"src/managers"}},{"name":"delete","description":"Deletes a tweet created by the authorized user.","see":[],"examples":["const data = await client.tweets.delete('1487382074546089985');\nconsole.log(data); // { deleted: true }"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"tweet","description":"The tweet to delete","optional":false,"type":[[["TweetResolvable"]]]}],"returns":[[["Promise","<{"],["\ndeleted",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `deleted` field","meta":{"line":222,"file":"TweetManager.ts","path":"src/managers"}},{"name":"fetch","description":"Fetches one or more tweets.","see":[],"examples":["// Fetch a single tweet\nconst tweet = await client.tweets.fetch('1336749579228745728');\n\n// Fetch multiple tweets\nconst tweets = await client.tweets.fetch(['1336749579228745728', '1413113670448553986']);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"tweetOrTweets","description":"The tweet or tweets to fetch","optional":false,"type":[[["T"]]]},{"name":"options","description":"An object containing optional parameters to apply","optional":true,"type":[[["FetchTweetOrTweetsOptions","<"],["T",">"]]]}],"returns":[[["Promise","<"],["TweetManagerFetchResult","<"],["T",">>"]]],"returnsDescription":"A {@link Tweet} or a {@link Collection} of them","meta":{"line":72,"file":"TweetManager.ts","path":"src/managers"}},{"name":"hide","description":"Hides a reply to a tweet created by the authorized user.","see":[],"examples":["const data = await client.tweets.hide('1487374434654912517');\nconsole.log(data); // { hidden: true }"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"tweet","description":"The reply to hide","optional":false,"type":[[["TweetResolvable"]]]}],"returns":[[["Promise","<{"],["\nhidden",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `hidden` field","meta":{"line":141,"file":"TweetManager.ts","path":"src/managers"}},{"name":"like","description":"Likes a tweet.","see":[],"examples":["const data = await client.tweets.like('1336749579228745728');\nconsole.log(data); // { liked: true }"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"tweet","description":"The tweet to like","optional":false,"type":[[["TweetResolvable"]]]}],"returns":[[["Promise","<{"],["\nliked",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `liked` field","meta":{"line":99,"file":"TweetManager.ts","path":"src/managers"}},{"name":"resolve","description":"Resolves a tweet resolvable to its respective {@link Tweet} object.","params":[{"name":"tweetResolvable","description":"An Id or instance that can be resolved to a tweet object","optional":false,"type":[[["TweetResolvable"]]]}],"returns":[[["null"," | "],["Tweet"]]],"returnsDescription":"The resolved tweet object","meta":{"line":41,"file":"TweetManager.ts","path":"src/managers"}},{"name":"resolveId","description":"Resolves a tweet resolvable to its respective id.","params":[{"name":"tweetResolvable","description":"An Id or instance that can be resolved to a tweet object","optional":false,"type":[[["TweetResolvable"]]]}],"returns":[[["null"," | "],["string"]]],"returnsDescription":"The id of the resolved tweet object","meta":{"line":53,"file":"TweetManager.ts","path":"src/managers"}},{"name":"retweet","description":"Retweets a tweet.","see":[],"examples":["const data = await client.tweets.retweet('1482736526950023178');\nconsole.log(data); // { retweeted: true }"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"tweet","description":"The tweet to retweet","optional":false,"type":[[["TweetResolvable"]]]}],"returns":[[["Promise","<{"],["\nretweeted",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `retweeted` field","meta":{"line":165,"file":"TweetManager.ts","path":"src/managers"}},{"name":"unRetweet","description":"Removes the retweet of a tweet.","see":[],"examples":["const data = await client.tweets.unRetweet('1482736526950023178');\nconsole.log(data); // { retweeted: false }"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"tweet","description":"The tweet whose retweet is to be removed","optional":false,"type":[[["TweetResolvable"]]]}],"returns":[[["Promise","<{"],["\nretweeted",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `retweeted` field","meta":{"line":186,"file":"TweetManager.ts","path":"src/managers"}},{"name":"unhide","description":"Unhides a reply to a tweet created by the authorized user.","see":[],"examples":["const data = await client.tweets.unhide('1487374434654912517');\nconsole.log(data); // { hidden: false }"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"tweet","description":"The reply to unhide","optional":false,"type":[[["TweetResolvable"]]]}],"returns":[[["Promise","<{"],["\nhidden",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `hidden` field","meta":{"line":153,"file":"TweetManager.ts","path":"src/managers"}},{"name":"unlike","description":"Unlikes a tweet.","see":[],"examples":["const data = await client.tweets.unlike('1336749579228745728');\nconsole.log(data); // { liked: false }"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"tweet","description":"The tweet to unlike","optional":false,"type":[[["TweetResolvable"]]]}],"returns":[[["Promise","<{"],["\nliked",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing the `liked` field","meta":{"line":120,"file":"TweetManager.ts","path":"src/managers"}}],"meta":{"line":28,"file":"TweetManager.ts","path":"src/managers"}},{"name":"TweetMentionEntity","extends":["TweetBaseEntity"],"construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APITweetMentionEntity"]]]}],"returns":[[["TweetMentionEntity"]]],"meta":{"line":122,"file":"TweetEntities.ts","path":"src/structures/misc"}},"props":[{"name":"end","type":[[["number"]]],"meta":{"line":79,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"id","type":[[["string"]]],"meta":{"line":120,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"start","type":[[["number"]]],"meta":{"line":78,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"username","type":[[["string"]]],"meta":{"line":119,"file":"TweetEntities.ts","path":"src/structures/misc"}}],"meta":{"line":118,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"TweetNonPublicMetrics","construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APITweetNonPublicMetrics"]]]}],"returns":[[["TweetNonPublicMetrics"]]],"meta":{"line":13,"file":"TweetMetrics.ts","path":"src/structures/misc"}},"props":[{"name":"impressionCount","type":[[["number"]]],"meta":{"line":9,"file":"TweetMetrics.ts","path":"src/structures/misc"}},{"name":"urlLinkClicks","type":[[["null"," | "],["number"]]],"meta":{"line":10,"file":"TweetMetrics.ts","path":"src/structures/misc"}},{"name":"userProfileClicks","type":[[["number"]]],"meta":{"line":11,"file":"TweetMetrics.ts","path":"src/structures/misc"}}],"meta":{"line":8,"file":"TweetMetrics.ts","path":"src/structures/misc"}},{"name":"TweetOrganicMetrics","extends":["TweetNonPublicMetrics"],"construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APITweetOrganicMetrics"]]]}],"returns":[[["TweetOrganicMetrics"]]],"meta":{"line":25,"file":"TweetMetrics.ts","path":"src/structures/misc"}},"props":[{"name":"impressionCount","type":[[["number"]]],"meta":{"line":9,"file":"TweetMetrics.ts","path":"src/structures/misc"}},{"name":"likeCount","type":[[["number"]]],"meta":{"line":21,"file":"TweetMetrics.ts","path":"src/structures/misc"}},{"name":"replyCount","type":[[["number"]]],"meta":{"line":22,"file":"TweetMetrics.ts","path":"src/structures/misc"}},{"name":"retweetCount","type":[[["number"]]],"meta":{"line":23,"file":"TweetMetrics.ts","path":"src/structures/misc"}},{"name":"urlLinkClicks","type":[[["null"," | "],["number"]]],"meta":{"line":10,"file":"TweetMetrics.ts","path":"src/structures/misc"}},{"name":"userProfileClicks","type":[[["number"]]],"meta":{"line":11,"file":"TweetMetrics.ts","path":"src/structures/misc"}}],"meta":{"line":20,"file":"TweetMetrics.ts","path":"src/structures/misc"}},{"name":"TweetPayload","construct":{"name":"constructor","params":[{"name":"client","optional":false,"type":[[["Client"]]]},{"name":"options","optional":false,"type":[[["TweetCreateOptions"]]]}],"returns":[[["TweetPayload"]]],"meta":{"line":16,"file":"TweetPayload.ts","path":"src/structures"}},"props":[{"name":"client","type":[[["Client"]]],"meta":{"line":14,"file":"TweetPayload.ts","path":"src/structures"}},{"name":"options","type":[[["TweetCreateOptions"]]],"meta":{"line":12,"file":"TweetPayload.ts","path":"src/structures"}}],"methods":[{"name":"resolveData","returns":[[["POSTTweetsJSONBody"]]],"meta":{"line":53,"file":"TweetPayload.ts","path":"src/structures"}},{"name":"resolveGeo","params":[{"name":"geoData","optional":true,"type":[[["TweetCreateGeoOptions"]]]}],"returns":[[["undefined"," | {"],["\nplace","_"],["id",": "],["string\n","}"]]],"meta":{"line":21,"file":"TweetPayload.ts","path":"src/structures"}},{"name":"resolveMedia","params":[{"name":"mediaData","optional":true,"type":[[["TweetCreateMediaOptions"]]]}],"returns":[[["undefined"," | {"],["\nmedia","_"],["ids",": "],["Array","<"],["string",">,"],["\ntagged","_"],["user","_"],["ids",": "],["Array","<"],["string",">"],["\n","}"]]],"meta":{"line":25,"file":"TweetPayload.ts","path":"src/structures"}},{"name":"resolvePoll","params":[{"name":"pollData","optional":true,"type":[[["TweetCreatePollOptions"]]]}],"returns":[[["undefined"," | {"],["\nduration","_"],["minutes",": "],["number",","],["\noptions",": "],["Array","<"],["string",">"],["\n","}"]]],"meta":{"line":34,"file":"TweetPayload.ts","path":"src/structures"}},{"name":"resolveReply","returns":[[["undefined"," | {"],["\nexclude","_"],["reply","_"],["user","_"],["ids",": "],["Array","<"],["string",">,"],["\nin","_"],["reply","_"],["to","_"],["tweet","_"],["id",": "],["string\n","}"]]],"meta":{"line":38,"file":"TweetPayload.ts","path":"src/structures"}}],"meta":{"line":11,"file":"TweetPayload.ts","path":"src/structures"}},{"name":"TweetPromotedMetrics","extends":["TweetOrganicMetrics"],"construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APITweetPromotedMetrics"]]]}],"returns":[[["TweetPromotedMetrics"]]],"meta":{"line":35,"file":"TweetMetrics.ts","path":"src/structures/misc"}},"props":[{"name":"impressionCount","type":[[["number"]]],"meta":{"line":9,"file":"TweetMetrics.ts","path":"src/structures/misc"}},{"name":"likeCount","type":[[["number"]]],"meta":{"line":21,"file":"TweetMetrics.ts","path":"src/structures/misc"}},{"name":"replyCount","type":[[["number"]]],"meta":{"line":22,"file":"TweetMetrics.ts","path":"src/structures/misc"}},{"name":"retweetCount","type":[[["number"]]],"meta":{"line":23,"file":"TweetMetrics.ts","path":"src/structures/misc"}},{"name":"urlLinkClicks","type":[[["null"," | "],["number"]]],"meta":{"line":10,"file":"TweetMetrics.ts","path":"src/structures/misc"}},{"name":"userProfileClicks","type":[[["number"]]],"meta":{"line":11,"file":"TweetMetrics.ts","path":"src/structures/misc"}}],"meta":{"line":34,"file":"TweetMetrics.ts","path":"src/structures/misc"}},{"name":"TweetPublicMetrics","construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APITweetPublicMetrics"]]]}],"returns":[[["TweetPublicMetrics"]]],"meta":{"line":46,"file":"TweetMetrics.ts","path":"src/structures/misc"}},"props":[{"name":"likeCount","type":[[["number"]]],"meta":{"line":43,"file":"TweetMetrics.ts","path":"src/structures/misc"}},{"name":"quoteCount","type":[[["number"]]],"meta":{"line":44,"file":"TweetMetrics.ts","path":"src/structures/misc"}},{"name":"replyCount","type":[[["number"]]],"meta":{"line":42,"file":"TweetMetrics.ts","path":"src/structures/misc"}},{"name":"retweetCount","type":[[["number"]]],"meta":{"line":41,"file":"TweetMetrics.ts","path":"src/structures/misc"}}],"meta":{"line":40,"file":"TweetMetrics.ts","path":"src/structures/misc"}},{"name":"TweetReference","construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APITweetReferencedTweet"]]]}],"returns":[[["TweetReference"]]],"meta":{"line":93,"file":"Miscellaneous.ts","path":"src/structures/misc"}},"props":[{"name":"id","description":"The ID of the referenced tweet","type":[[["string"]]],"meta":{"line":91,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"type","description":"The relation between this tweet and the referenced tweet","type":[[["APITweetReferencedTweetType"]]],"meta":{"line":86,"file":"Miscellaneous.ts","path":"src/structures/misc"}}],"meta":{"line":82,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"TweetURLEntity","extends":["TweetBaseEntity"],"construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APITweetURLEntity"]]]}],"returns":[[["TweetURLEntity"]]],"meta":{"line":138,"file":"TweetEntities.ts","path":"src/structures/misc"}},"props":[{"name":"description","type":[[["string"]]],"meta":{"line":135,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"displayURL","type":[[["string"]]],"meta":{"line":132,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"end","type":[[["number"]]],"meta":{"line":79,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"expandedURL","type":[[["string"]]],"meta":{"line":131,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"start","type":[[["number"]]],"meta":{"line":78,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"status","type":[[["string"]]],"meta":{"line":133,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"title","type":[[["string"]]],"meta":{"line":134,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"unwoundURL","type":[[["string"]]],"meta":{"line":136,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"url","type":[[["string"]]],"meta":{"line":130,"file":"TweetEntities.ts","path":"src/structures/misc"}}],"meta":{"line":129,"file":"TweetEntities.ts","path":"src/structures/misc"}},{"name":"TweetWithheld","description":"Represents withholding details about a tweet","extends":["UserWitheld"],"construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APITweetWithheld"]]]}],"returns":[[["TweetWithheld"]]],"meta":{"line":263,"file":"Miscellaneous.ts","path":"src/structures/misc"}},"props":[{"name":"copyright","description":"Whether the content is being withheld on the basis of copyright infringement","type":[[["boolean"]]],"meta":{"line":261,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"countryCodes","description":"A list of countries where this content is not available","type":[[["Array","<"],["string",">"]]],"meta":{"line":241,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"scope","description":"The type of content being withheld","type":[[["null"," | "],["string"]]],"meta":{"line":246,"file":"Miscellaneous.ts","path":"src/structures/misc"}}],"meta":{"line":257,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"TweetsCountBook","description":"A class for fetching number of tweets matching a search query","extends":["BaseRangeBook"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]},{"name":"options","description":"The options to initialize the book with","optional":false,"type":[[["TweetsCountBookOptions"]]]}],"returns":[[["TweetsCountBook"]]],"meta":{"line":25,"file":"TweetsCountBook.ts","path":"src/books"}},"props":[{"name":"afterTweetId","description":"The book will fetch tweets that were created after this tweet Id","type":[[["null"," | "],["string"]]],"meta":{"line":9,"file":"BaseRangeBook.ts","path":"src/books"}},{"name":"beforeTweetId","description":"The book will fetch tweets that were created before this tweet Id","type":[[["null"," | "],["string"]]],"meta":{"line":14,"file":"BaseRangeBook.ts","path":"src/books"}},{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseBook.ts","path":"src/books"}},{"name":"endTimestamp","description":"The book will fetch tweets that were created at or before this timestamp","type":[[["null"," | "],["number"]]],"meta":{"line":24,"file":"BaseRangeBook.ts","path":"src/books"}},{"name":"granularity","description":"The book will group buckets according to this granularity","type":[[["undefined"," | "],["null"," | "],["'minute'"," | "],["'hour'"," | "],["'day'"]]],"meta":{"line":19,"file":"TweetsCountBook.ts","path":"src/books"}},{"name":"hasMore","description":"Whether there are more pages of tweets to be fetched","type":[[["boolean"]]],"meta":{"line":44,"file":"BaseBook.ts","path":"src/books"}},{"name":"maxResultsPerPage","description":"The maximum amount of tweets that will be fetched per page.","type":[[["null"," | "],["number"]]],"meta":{"line":37,"file":"BaseBook.ts","path":"src/books"}},{"name":"query","description":"The query for searching the tweets","type":[[["string"]]],"meta":{"line":14,"file":"TweetsCountBook.ts","path":"src/books"}},{"name":"startTimestamp","description":"The book will fetch tweets that were created at or after this timestamp","type":[[["null"," | "],["number"]]],"meta":{"line":19,"file":"BaseRangeBook.ts","path":"src/books"}}],"methods":[{"name":"#fetchPages","access":"private","params":[{"name":"token","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["TweetCountBucket",">>"]]],"meta":{"line":44,"file":"TweetsCountBook.ts","path":"src/books"}},{"name":"fetchNextPage","description":"Fetches the next page of the book if there is one.","returns":[[["Promise","<"],["Array","<"],["TweetCountBucket",">>"]]],"returnsDescription":"","meta":{"line":35,"file":"TweetsCountBook.ts","path":"src/books"}}],"meta":{"line":10,"file":"TweetsCountBook.ts","path":"src/books"}},{"name":"User","description":"The class that represents a Twitter user","extends":["SimplifiedUser"],"construct":{"name":"constructor","params":[{"name":"client","optional":false,"type":[[["Client"]]]},{"name":"data","optional":false,"type":[[["SingleUserLookupResponse"]]]}],"returns":[[["User"]]],"meta":{"line":15,"file":"User.ts","path":"src/structures"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseStructure.ts","path":"src/structures"}},{"name":"createdAt","description":"The UTC datetime that the user account was created on Twitter","type":[[["null"," | "],["Date"]]],"meta":{"line":34,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"description","description":"The text of this user's profile description (also known as bio), if the user provided one","type":[[["null"," | "],["string"]]],"meta":{"line":39,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"entities","description":"Contains details about text that has a special meaning in the user's description","type":[[["null"," | "],["UserEntities"]]],"meta":{"line":44,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"id","description":"The unique identifier of the strucutre","type":[[["string"]]],"meta":{"line":15,"file":"BaseStructure.ts","path":"src/structures"}},{"name":"location","description":"The location specified in the user's profile, if the user provided one. As this is a freeform value,\nit may not indicate a valid location, but it may be fuzzily evaluated when performing searches with\nlocation queries","type":[[["null"," | "],["string"]]],"meta":{"line":51,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"name","description":"The name of the user, as they’ve defined it on their profile. Not necessarily a person’s name.\nTypically capped at `50` characters, but subject to change","type":[[["string"]]],"meta":{"line":22,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"pinnedTweet","description":"The tweet pinned by this user","type":[[["null"," | "],["SimplifiedTweet"]]],"meta":{"line":13,"file":"User.ts","path":"src/structures"}},{"name":"pinnedTweetId","description":"The unique identifier of this user's pinned Tweet","type":[[["null"," | "],["string"]]],"meta":{"line":56,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"profileImageURL","description":"The URL to the profile image for this user, as shown on the user's profile","type":[[["null"," | "],["string"]]],"meta":{"line":61,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"protected","description":"Indicates if this user has chosen to protect their Tweets (in other words, if this user's Tweets are private)","type":[[["null"," | "],["boolean"]]],"meta":{"line":66,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"publicMetrics","description":"Contains details about activity for this user","type":[[["null"," | "],["UserPublicMetrics"]]],"meta":{"line":71,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"url","description":"The URL specified in the user's profile, if present","type":[[["null"," | "],["string"]]],"meta":{"line":76,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"username","description":"The Twitter screen name, handle, or alias that this user identifies themselves with. Usernames are unique but\nsubject to change. Typically a maximum of `15` characters long, but some historical accounts may exist with longer\nnames","type":[[["string"]]],"meta":{"line":29,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"verified","description":"Indicates if this user is a verified Twitter User","type":[[["null"," | "],["boolean"]]],"meta":{"line":81,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"withheld","description":"Contains withholding details for withheld content, if applicable","type":[[["null"," | "],["UserWitheld"]]],"meta":{"line":86,"file":"SimplifiedUser.ts","path":"src/structures"}}],"methods":[{"name":"#patchPinnedTweet","access":"private","params":[{"name":"tweets","optional":true,"type":[[["Array","<"],["APITweet",">"]]]}],"returns":[[["undefined"," | "],["SimplifiedTweet"]]],"meta":{"line":21,"file":"User.ts","path":"src/structures"}},{"name":"block","description":"Blocks this user on twitter.","returns":[[["Promise","<{"],["\nblocking",": "],["boolean\n","}>"]]],"meta":{"line":123,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"follow","description":"Follows this user on twitter.","returns":[[["Promise","<{"],["\nfollowing",": "],["boolean",","],["\npending","_"],["follow",": "],["boolean\n","}>"]]],"meta":{"line":109,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"mute","description":"Mutes this user on twitter.","returns":[[["Promise","<{"],["\nmuting",": "],["boolean\n","}>"]]],"meta":{"line":137,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"unblock","description":"Unblocks this user on twitter.","returns":[[["Promise","<{"],["\nblocking",": "],["boolean\n","}>"]]],"meta":{"line":130,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"unfollow","description":"Unfollows this user on twitter.","returns":[[["Promise","<{"],["\nfollowing",": "],["boolean\n","}>"]]],"meta":{"line":116,"file":"SimplifiedUser.ts","path":"src/structures"}},{"name":"unmute","description":"Unmutes this user on twitter.","returns":[[["Promise","<{"],["\nmuting",": "],["boolean\n","}>"]]],"meta":{"line":144,"file":"SimplifiedUser.ts","path":"src/structures"}}],"meta":{"line":9,"file":"User.ts","path":"src/structures"}},{"name":"UserBaseEntity","construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APIUserBaseEntity"]]]}],"returns":[[["UserBaseEntity"]]],"meta":{"line":79,"file":"UserEntities.ts","path":"src/structures/misc"}},"props":[{"name":"end","type":[[["number"]]],"meta":{"line":77,"file":"UserEntities.ts","path":"src/structures/misc"}},{"name":"start","type":[[["number"]]],"meta":{"line":76,"file":"UserEntities.ts","path":"src/structures/misc"}}],"meta":{"line":75,"file":"UserEntities.ts","path":"src/structures/misc"}},{"name":"UserCashtagEntity","extends":["UserBaseEntity"],"construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APIUserCashtagEntity"]]]}],"returns":[[["UserCashtagEntity"]]],"meta":{"line":88,"file":"UserEntities.ts","path":"src/structures/misc"}},"props":[{"name":"end","type":[[["number"]]],"meta":{"line":77,"file":"UserEntities.ts","path":"src/structures/misc"}},{"name":"start","type":[[["number"]]],"meta":{"line":76,"file":"UserEntities.ts","path":"src/structures/misc"}},{"name":"tag","type":[[["string"]]],"meta":{"line":86,"file":"UserEntities.ts","path":"src/structures/misc"}}],"meta":{"line":85,"file":"UserEntities.ts","path":"src/structures/misc"}},{"name":"UserDescriptionEntity","construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APIUserEntitiesDescription"]]]}],"returns":[[["UserDescriptionEntity"]]],"meta":{"line":27,"file":"UserEntities.ts","path":"src/structures/misc"}},"props":[{"name":"cashtags","type":[[["Array","<"],["UserCashtagEntity",">"]]],"meta":{"line":25,"file":"UserEntities.ts","path":"src/structures/misc"}},{"name":"hashtags","type":[[["Array","<"],["UserHashtagEntity",">"]]],"meta":{"line":23,"file":"UserEntities.ts","path":"src/structures/misc"}},{"name":"mentions","type":[[["Array","<"],["UserMentionEntity",">"]]],"meta":{"line":24,"file":"UserEntities.ts","path":"src/structures/misc"}},{"name":"urls","type":[[["Array","<"],["UserURLEntity",">"]]],"meta":{"line":22,"file":"UserEntities.ts","path":"src/structures/misc"}}],"methods":[{"name":"#patchCashtags","access":"private","params":[{"name":"rawUserCashtags","optional":true,"type":[[["Array","<"],["APIUserCashtagEntity",">"]]]}],"returns":[[["Array","<"],["UserCashtagEntity",">"]]],"meta":{"line":34,"file":"UserEntities.ts","path":"src/structures/misc"}},{"name":"#patchHashtags","access":"private","params":[{"name":"rawUserHashtags","optional":true,"type":[[["Array","<"],["APIUserHashtagEntity",">"]]]}],"returns":[[["Array","<"],["UserHashtagEntity",">"]]],"meta":{"line":44,"file":"UserEntities.ts","path":"src/structures/misc"}},{"name":"#patchMentions","access":"private","params":[{"name":"rawUserMentions","optional":true,"type":[[["Array","<"],["APIUserMentionEntity",">"]]]}],"returns":[[["Array","<"],["UserMentionEntity",">"]]],"meta":{"line":54,"file":"UserEntities.ts","path":"src/structures/misc"}},{"name":"#patchUrls","access":"private","params":[{"name":"rawUserUrls","optional":true,"type":[[["Array","<"],["APIUserURLEntity",">"]]]}],"returns":[[["Array","<"],["UserURLEntity",">"]]],"meta":{"line":64,"file":"UserEntities.ts","path":"src/structures/misc"}}],"meta":{"line":21,"file":"UserEntities.ts","path":"src/structures/misc"}},{"name":"UserEntities","construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APIUserEntities"]]]}],"returns":[[["UserEntities"]]],"meta":{"line":15,"file":"UserEntities.ts","path":"src/structures/misc"}},"props":[{"name":"description","type":[[["null"," | "],["UserDescriptionEntity"]]],"meta":{"line":13,"file":"UserEntities.ts","path":"src/structures/misc"}},{"name":"url","type":[[["null"," | "],["UserURLEntity"]]],"meta":{"line":12,"file":"UserEntities.ts","path":"src/structures/misc"}}],"meta":{"line":11,"file":"UserEntities.ts","path":"src/structures/misc"}},{"name":"UserFollowersBook","description":"A class for fetching followers of a twitter user","extends":["BaseBook"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]},{"name":"options","description":"The options to initialize the with","optional":false,"type":[[["UserFollowersBookOptions"]]]}],"returns":[[["UserFollowersBook"]]],"meta":{"line":22,"file":"UserFollowersBook.ts","path":"src/books"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseBook.ts","path":"src/books"}},{"name":"hasMore","description":"Whether there are more pages of tweets to be fetched","type":[[["boolean"]]],"meta":{"line":44,"file":"BaseBook.ts","path":"src/books"}},{"name":"maxResultsPerPage","description":"The maximum amount of tweets that will be fetched per page.","type":[[["null"," | "],["number"]]],"meta":{"line":37,"file":"BaseBook.ts","path":"src/books"}},{"name":"userId","description":"The Id of the user this book belongs to","type":[[["string"]]],"meta":{"line":16,"file":"UserFollowersBook.ts","path":"src/books"}}],"methods":[{"name":"#fetchPages","access":"private","params":[{"name":"token","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"meta":{"line":51,"file":"UserFollowersBook.ts","path":"src/books"}},{"name":"fetchNextPage","description":"Fetches the next page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"returnsDescription":"A {@link Collection} of {@link User} who follow the given user","meta":{"line":33,"file":"UserFollowersBook.ts","path":"src/books"}},{"name":"fetchPreviousPage","description":"Fetches the previous page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"returnsDescription":"A {@link Collection} of {@link User} who follow the given user","meta":{"line":46,"file":"UserFollowersBook.ts","path":"src/books"}}],"meta":{"line":12,"file":"UserFollowersBook.ts","path":"src/books"}},{"name":"UserFollowingsBook","description":"A class for fetching users followed by a twitter user","extends":["BaseBook"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]},{"name":"options","description":"The options to initialize the book with","optional":false,"type":[[["UserFollowingsBookOptions"]]]}],"returns":[[["UserFollowingsBook"]]],"meta":{"line":22,"file":"UserFollowingsBook.ts","path":"src/books"}},"props":[{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseBook.ts","path":"src/books"}},{"name":"hasMore","description":"Whether there are more pages of tweets to be fetched","type":[[["boolean"]]],"meta":{"line":44,"file":"BaseBook.ts","path":"src/books"}},{"name":"maxResultsPerPage","description":"The maximum amount of tweets that will be fetched per page.","type":[[["null"," | "],["number"]]],"meta":{"line":37,"file":"BaseBook.ts","path":"src/books"}},{"name":"userId","description":"The Id of the user this book belongs to","type":[[["string"]]],"meta":{"line":16,"file":"UserFollowingsBook.ts","path":"src/books"}}],"methods":[{"name":"#fetchPages","access":"private","params":[{"name":"token","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"meta":{"line":51,"file":"UserFollowingsBook.ts","path":"src/books"}},{"name":"fetchNextPage","description":"Fetches the next page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"returnsDescription":"A {@link Collection} of {@link User} that the given user follows","meta":{"line":33,"file":"UserFollowingsBook.ts","path":"src/books"}},{"name":"fetchPreviousPage","description":"Fetches the previous page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"returnsDescription":"A {@link Collection} of {@link User} that the given user follows","meta":{"line":46,"file":"UserFollowingsBook.ts","path":"src/books"}}],"meta":{"line":12,"file":"UserFollowingsBook.ts","path":"src/books"}},{"name":"UserHashtagEntity","extends":["UserBaseEntity"],"construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APIUserHashtagEntity"]]]}],"returns":[[["UserHashtagEntity"]]],"meta":{"line":98,"file":"UserEntities.ts","path":"src/structures/misc"}},"props":[{"name":"end","type":[[["number"]]],"meta":{"line":77,"file":"UserEntities.ts","path":"src/structures/misc"}},{"name":"start","type":[[["number"]]],"meta":{"line":76,"file":"UserEntities.ts","path":"src/structures/misc"}},{"name":"tag","type":[[["string"]]],"meta":{"line":96,"file":"UserEntities.ts","path":"src/structures/misc"}}],"meta":{"line":95,"file":"UserEntities.ts","path":"src/structures/misc"}},{"name":"UserManager","description":"The manager class that holds API methods for {@link User} objects and stores their cache","extends":["BaseManager<string, UserResolvable, User>"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]}],"returns":[[["UserManager"]]],"meta":{"line":33,"file":"UserManager.ts","path":"src/managers"}},"props":[{"name":"#holds","description":"The structure that this manager stores in its cache","access":"private","type":[[["StructureConstructable","<"],["User",">"]]],"meta":{"line":21,"file":"BaseManager.ts","path":"src/managers"}},{"name":"cache","description":"The cache of the structures held by this manager","type":[[["Collection","<"],["string",", "],["User",">"]]],"meta":{"line":16,"file":"BaseManager.ts","path":"src/managers"}},{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":11,"file":"BaseManager.ts","path":"src/managers"}}],"methods":[{"name":"#fetchMultipleUsersByIds","description":"Fetches multiple users by using their ids.","access":"private","params":[{"name":"userIds","description":"The ids of the users to fetch","optional":false,"type":[[["Array","<"],["string",">"]]]},{"name":"options","description":"An object containing optional parameters to apply","optional":true,"type":[[["FetchUsersOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"returnsDescription":"A {@link Collection} of {@link User}","meta":{"line":284,"file":"UserManager.ts","path":"src/managers"}},{"name":"#fetchMultipleUsersByUsernames","description":"Fetches multiple users by using their usernames.","access":"private","params":[{"name":"usernames","description":"The usernames of the users to fetch","optional":false,"type":[[["Array","<"],["string",">"]]]},{"name":"options","description":"An object containing optional parameters to apply","optional":true,"type":[[["FetchUsersByUsernamesOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"returnsDescription":"A {@link Collection} of {@link User}","meta":{"line":335,"file":"UserManager.ts","path":"src/managers"}},{"name":"#fetchSingleUserById","description":"Fetches a single user by using its id.","access":"private","params":[{"name":"userId","description":"The id of the user to fetch","optional":false,"type":[[["string"]]]},{"name":"options","description":"An object containing optional parameters to apply","optional":true,"type":[[["BaseFetchOptions"]]]}],"returns":[[["Promise","<"],["User",">"]]],"returnsDescription":"A {@link User}","meta":{"line":262,"file":"UserManager.ts","path":"src/managers"}},{"name":"#fetchSingleUserByUsername","description":"Fetches a single user by using its username.","access":"private","params":[{"name":"username","description":"The username of the user to fetch","optional":false,"type":[[["string"]]]},{"name":"options","description":"An object containing optional parameters to apply","optional":true,"type":[[["BaseFetchOptions"]]]}],"returns":[[["Promise","<"],["User",">"]]],"returnsDescription":"A {@link User}","meta":{"line":313,"file":"UserManager.ts","path":"src/managers"}},{"name":"block","description":"Blocks a user.","see":[],"examples":["const data = await client.users.block('1253316035878375424');\nconsole.log(data); // { blocking: true }"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"user","description":"The user to block","optional":false,"type":[[["UserResolvable"]]]}],"returns":[[["Promise","<{"],["\nblocking",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing a `blocking` field","meta":{"line":180,"file":"UserManager.ts","path":"src/managers"}},{"name":"fetch","description":"Fetches one or more users.","see":[],"examples":["// Fetch a single user\nconst user = await client.users.fetch('1253316035878375424');\n\n// Fetch multiple users\nconst users = await client.users.fetch(['1253316035878375424', '6253282']);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"userOrUsers","description":"The user or users to fetch","optional":false,"type":[[["U"]]]},{"name":"options","description":"An object containing optional parameters to apply","optional":true,"type":[[["FetchUserOrUsersOptions","<"],["U",">"]]]}],"returns":[[["Promise","<"],["UserManagerFetchResult","<"],["U",">>"]]],"returnsDescription":"A {@link User} or a {@link Collection} of them","meta":{"line":77,"file":"UserManager.ts","path":"src/managers"}},{"name":"fetchByUsername","description":"Fetches one or more users using their usernames.","see":[],"examples":["// Fetch a single user\nconst user = await client.users.fetchByUsername('iShiibi');\n\n// Fetch multiple users\nconst users = await client.users.fetchByUsername(['iShiibi', 'TwitterAPI']);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"usernameOrUsernames","description":"The username(s) of user or users to fetch","optional":false,"type":[[["U"]]]},{"name":"options","description":"An object containing optional parameters to apply","optional":true,"type":[[["FetchUserOrUsersByUsernameOptions","<"],["U",">"]]]}],"returns":[[["Promise","<"],["UserManagerFetchByUsernameResult","<"],["U",">>"]]],"returnsDescription":"A {@link User} or a {@link Collection} of them","meta":{"line":110,"file":"UserManager.ts","path":"src/managers"}},{"name":"follow","description":"Follows a user.","see":["https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/post-users-source_user_id-following"],"examples":["const data = await client.users.follow('1253316035878375424');\nconsole.log(data); // { following: true, pending_follow: false }"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"user","description":"The user to follow","optional":false,"type":[[["UserResolvable"]]]}],"returns":[[["Promise","<{"],["\nfollowing",": "],["boolean",","],["\npending","_"],["follow",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing `following` and `pending_follow` fields","meta":{"line":137,"file":"UserManager.ts","path":"src/managers"}},{"name":"mute","description":"Mutes a user.","see":[],"examples":["const data = await client.users.mute('1253316035878375424');\nconsole.log(data); // { muting: true }"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"user","description":"The user to mute","optional":false,"type":[[["UserResolvable"]]]}],"returns":[[["Promise","<{"],["\nmuting",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing a `muting` field","meta":{"line":222,"file":"UserManager.ts","path":"src/managers"}},{"name":"resolve","description":"Resolves a user resolvable to its respective {@link User} object.","params":[{"name":"userResolvable","description":"An ID or instance that can be resolved to a user object","optional":false,"type":[[["UserResolvable"]]]}],"returns":[[["null"," | "],["User"]]],"returnsDescription":"The resolved user object","meta":{"line":42,"file":"UserManager.ts","path":"src/managers"}},{"name":"resolveId","description":"Resolves a user resolvable to its respective id.","params":[{"name":"userResolvable","description":"An ID or instance that can be resolved to a user object","optional":false,"type":[[["UserResolvable"]]]}],"returns":[[["null"," | "],["string"]]],"returnsDescription":"The id of the resolved user object","meta":{"line":57,"file":"UserManager.ts","path":"src/managers"}},{"name":"unblock","description":"Unblocks a user.","see":[],"examples":["const data = await client.users.unblock('1253316035878375424');\nconsole.log(data); // { blocking: false }"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"user","description":"The user to unblock","optional":false,"type":[[["UserResolvable"]]]}],"returns":[[["Promise","<{"],["\nblocking",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing a `blocking` field","meta":{"line":201,"file":"UserManager.ts","path":"src/managers"}},{"name":"unfollow","description":"Unfollows a user.","see":["https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/delete-users-source_id-following"],"examples":["const data = await client.users.unfollow('1253316035878375424');\nconsole.log(data); // { following: false }"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"user","description":"The user to unfollow","optional":false,"type":[[["UserResolvable"]]]}],"returns":[[["Promise","<{"],["\nfollowing",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing a `following` field","meta":{"line":159,"file":"UserManager.ts","path":"src/managers"}},{"name":"unmute","description":"Unmutes a user.","see":[],"examples":["const data = await client.users.unmute('1253316035878375424');\nconsole.log(data); // { muting: false }"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"user","description":"The user to unmute","optional":false,"type":[[["UserResolvable"]]]}],"returns":[[["Promise","<{"],["\nmuting",": "],["boolean\n","}>"]]],"returnsDescription":"An object containing a `muting` field","meta":{"line":243,"file":"UserManager.ts","path":"src/managers"}}],"meta":{"line":29,"file":"UserManager.ts","path":"src/managers"}},{"name":"UserMentionEntity","extends":["UserBaseEntity"],"construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APIUserMentionEntity"]]]}],"returns":[[["UserMentionEntity"]]],"meta":{"line":108,"file":"UserEntities.ts","path":"src/structures/misc"}},"props":[{"name":"end","type":[[["number"]]],"meta":{"line":77,"file":"UserEntities.ts","path":"src/structures/misc"}},{"name":"start","type":[[["number"]]],"meta":{"line":76,"file":"UserEntities.ts","path":"src/structures/misc"}},{"name":"username","type":[[["string"]]],"meta":{"line":106,"file":"UserEntities.ts","path":"src/structures/misc"}}],"meta":{"line":105,"file":"UserEntities.ts","path":"src/structures/misc"}},{"name":"UserMentioningTweetsBook","description":"A class for fetching tweets that mention a twitter user","extends":["BaseRangeBook"],"construct":{"name":"constructor","params":[{"name":"client","description":"The logged in {@link Client} instance","optional":false,"type":[[["Client"]]]},{"name":"options","description":"The options to initialize the book with","optional":false,"type":[[["UserMentioningTweetsBookOptions"]]]}],"returns":[[["UserMentioningTweetsBook"]]],"meta":{"line":22,"file":"UserMentioningTweetsBook.ts","path":"src/books"}},"props":[{"name":"afterTweetId","description":"The book will fetch tweets that were created after this tweet Id","type":[[["null"," | "],["string"]]],"meta":{"line":9,"file":"BaseRangeBook.ts","path":"src/books"}},{"name":"beforeTweetId","description":"The book will fetch tweets that were created before this tweet Id","type":[[["null"," | "],["string"]]],"meta":{"line":14,"file":"BaseRangeBook.ts","path":"src/books"}},{"name":"client","description":"The instance of {@link Client} that was used to log in","type":[[["Client"]]],"meta":{"line":10,"file":"BaseBook.ts","path":"src/books"}},{"name":"endTimestamp","description":"The book will fetch tweets that were created at or before this timestamp","type":[[["null"," | "],["number"]]],"meta":{"line":24,"file":"BaseRangeBook.ts","path":"src/books"}},{"name":"hasMore","description":"Whether there are more pages of tweets to be fetched","type":[[["boolean"]]],"meta":{"line":44,"file":"BaseBook.ts","path":"src/books"}},{"name":"maxResultsPerPage","description":"The maximum amount of tweets that will be fetched per page.","type":[[["null"," | "],["number"]]],"meta":{"line":37,"file":"BaseBook.ts","path":"src/books"}},{"name":"startTimestamp","description":"The book will fetch tweets that were created at or after this timestamp","type":[[["null"," | "],["number"]]],"meta":{"line":19,"file":"BaseRangeBook.ts","path":"src/books"}},{"name":"userId","description":"The Id of the user this book belongs to","type":[[["string"]]],"meta":{"line":16,"file":"UserMentioningTweetsBook.ts","path":"src/books"}}],"methods":[{"name":"#fetchPages","access":"private","params":[{"name":"token","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Tweet",">>"]]],"meta":{"line":51,"file":"UserMentioningTweetsBook.ts","path":"src/books"}},{"name":"fetchNextPage","description":"Fetches the next page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["Tweet",">>"]]],"returnsDescription":"A {@link Collection} of {@link Tweets} that mention the given user","meta":{"line":33,"file":"UserMentioningTweetsBook.ts","path":"src/books"}},{"name":"fetchPreviousPage","description":"Fetches the previous page of the book if there is one.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["Tweet",">>"]]],"returnsDescription":"A {@link Collection} of {@link Tweets} that mention the given user","meta":{"line":46,"file":"UserMentioningTweetsBook.ts","path":"src/books"}}],"meta":{"line":12,"file":"UserMentioningTweetsBook.ts","path":"src/books"}},{"name":"UserPublicMetrics","construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APIUserPublicMetrics"]]]}],"returns":[[["UserPublicMetrics"]]],"meta":{"line":127,"file":"Miscellaneous.ts","path":"src/structures/misc"}},"props":[{"name":"followersCount","type":[[["number"]]],"meta":{"line":122,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"followingCount","type":[[["number"]]],"meta":{"line":123,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"listedCount","type":[[["number"]]],"meta":{"line":125,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"tweetCount","type":[[["number"]]],"meta":{"line":124,"file":"Miscellaneous.ts","path":"src/structures/misc"}}],"meta":{"line":121,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"UserURLEntity","extends":["UserBaseEntity"],"construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APIUserURLEntity"]]]}],"returns":[[["UserURLEntity"]]],"meta":{"line":120,"file":"UserEntities.ts","path":"src/structures/misc"}},"props":[{"name":"displayURL","type":[[["string"]]],"meta":{"line":118,"file":"UserEntities.ts","path":"src/structures/misc"}},{"name":"end","type":[[["number"]]],"meta":{"line":77,"file":"UserEntities.ts","path":"src/structures/misc"}},{"name":"expandedURL","type":[[["string"]]],"meta":{"line":117,"file":"UserEntities.ts","path":"src/structures/misc"}},{"name":"start","type":[[["number"]]],"meta":{"line":76,"file":"UserEntities.ts","path":"src/structures/misc"}},{"name":"url","type":[[["string"]]],"meta":{"line":116,"file":"UserEntities.ts","path":"src/structures/misc"}}],"meta":{"line":115,"file":"UserEntities.ts","path":"src/structures/misc"}},{"name":"UserWitheld","description":"Represents withholding details about a user","construct":{"name":"constructor","params":[{"name":"data","optional":false,"type":[[["APIUserWithheld"]]]}],"returns":[[["UserWitheld"]]],"meta":{"line":248,"file":"Miscellaneous.ts","path":"src/structures/misc"}},"props":[{"name":"countryCodes","description":"A list of countries where this content is not available","type":[[["Array","<"],["string",">"]]],"meta":{"line":241,"file":"Miscellaneous.ts","path":"src/structures/misc"}},{"name":"scope","description":"The type of content being withheld","type":[[["null"," | "],["string"]]],"meta":{"line":246,"file":"Miscellaneous.ts","path":"src/structures/misc"}}],"meta":{"line":237,"file":"Miscellaneous.ts","path":"src/structures/misc"}}],"typedefs":[{"name":"ApiOptions","description":"The options for the API in use","meta":{"line":66,"file":"BaseClient.ts","path":"src/client"},"props":[{"name":"baseURL","description":"The base URL of the API","optional":false,"type":[[["string"]]]},{"name":"version","description":"Current default version of the API","optional":false,"type":[[["number"]]]}]},{"name":"BaseBookOptions","meta":{"line":57,"file":"BaseBook.ts","path":"src/books"},"props":[{"name":"maxResultsPerPage","description":"The maximum number of results to fetch per page","optional":true,"type":[[["number"]]]}]},{"name":"BaseFetchOptions","description":"The common optional options to provide while fetching a content","meta":{"line":72,"file":"BaseManager.ts","path":"src/managers"},"props":[{"name":"cacheAfterFetching","description":"Whether to store the fetched content in cache for later use","optional":true,"type":[[["boolean"]]]},{"name":"skipCacheCheck","description":"Whether to skip cache check for the requested content and fetch from the API directly","optional":true,"type":[[["boolean"]]]}]},{"name":"BaseRangeBookOptions","meta":{"line":39,"file":"BaseRangeBook.ts","path":"src/books"},"props":[{"name":"afterTweet","description":"Only return tweets that were created after this tweet","optional":true,"type":[[["TweetResolvable"]]]},{"name":"beforeTweet","description":"Only return tweets that were created before this tweet","optional":true,"type":[[["TweetResolvable"]]]},{"name":"endTime","description":"Only return tweets that were created at or before this time","optional":true,"type":[[["number"," | "],["Date"]]]},{"name":"maxResultsPerPage","description":"The maximum number of results to fetch per page","optional":true,"type":[[["number"]]]},{"name":"startTime","description":"Only return tweets that were created at or after this time","optional":true,"type":[[["number"," | "],["Date"]]]}]},{"name":"BaseStructureData","description":"The data to instantiate {@link BaseStructure} with","meta":{"line":31,"file":"BaseStructure.ts","path":"src/structures"},"props":[{"name":"id","optional":false,"type":[[["string"]]]}]},{"name":"BlockedUsersBookOptions","meta":{"line":77,"file":"BlockedUsersBook.ts","path":"src/books"},"props":[{"name":"maxResultsPerPage","description":"The maximum number of results to fetch per page","optional":true,"type":[[["number"]]]},{"name":"user","optional":false,"type":[[["UserResolvable"]]]}]},{"name":"ClientCredentialsInterface","meta":{"line":159,"file":"Miscellaneous.ts","path":"src/structures/misc"},"props":[{"name":"accessToken","optional":false,"type":[[["string"]]]},{"name":"accessTokenSecret","optional":false,"type":[[["string"]]]},{"name":"bearerToken","optional":false,"type":[[["string"]]]},{"name":"consumerKey","optional":false,"type":[[["string"]]]},{"name":"consumerSecret","optional":false,"type":[[["string"]]]}]},{"name":"ClientEventsMapping","meta":{"line":78,"file":"BaseClient.ts","path":"src/client"},"props":[{"name":"filteredTweetCreate","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"partialError","optional":false,"type":[[["["],["unknown","]"]]]},{"name":"ready","optional":false,"type":[[["["],["unknown","]"]]]},{"name":"sampledTweetCreate","optional":false,"type":[[["["],["unknown","]"]]]}]},{"name":"ClientOptions","description":"The options which the client gets initialized with","meta":{"line":100,"file":"BaseClient.ts","path":"src/client"},"props":[{"name":"api","description":"The options provided for the API","optional":true,"type":[[["ApiOptions"]]]},{"name":"events","description":"The options for selecting what events should be fired","optional":false,"type":[[["Array","<"],["'FILTERED","_"],["TWEET","_"],["CREATE'"," | "],["'PARTIAL","_"],["ERROR'"," | "],["'READY'"," | "],["'SAMPLED","_"],["TWEET","_"],["CREATE'",">"]]]},{"name":"queryParameters","description":"The options provided for query of an API request","optional":true,"type":[[["QueryParameters"]]]}]},{"name":"ComposedTweetsBookOptions","meta":{"line":91,"file":"ComposedTweetsBook.ts","path":"src/books"},"props":[{"name":"afterTweet","description":"Only return tweets that were created after this tweet","optional":true,"type":[[["TweetResolvable"]]]},{"name":"beforeTweet","description":"Only return tweets that were created before this tweet","optional":true,"type":[[["TweetResolvable"]]]},{"name":"endTime","description":"Only return tweets that were created at or before this time","optional":true,"type":[[["number"," | "],["Date"]]]},{"name":"exclude","description":"The types of tweets to exclude","optional":true,"type":[[["Array","<"],["'retweets'"," | "],["'replies'",">"]]]},{"name":"maxResultsPerPage","description":"The maximum number of results to fetch per page","optional":true,"type":[[["number"]]]},{"name":"startTime","description":"Only return tweets that were created at or after this time","optional":true,"type":[[["number"," | "],["Date"]]]},{"name":"user","optional":false,"type":[[["UserResolvable"]]]}]},{"name":"CreateBookMapping","meta":{"line":290,"file":"Client.ts","path":"src/client"},"props":[{"name":"BlockedUsersBook","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"ComposedTweetsBook","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"FollowedListsBook","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"LikedByUsersBook","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"LikedTweetsBook","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"ListFollowersBook","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"ListMembersBook","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"ListTweetsBook","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"MemberOfListsBook","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"MutedUsersBook","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"OwnedListsBook","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"PinnedListsBook","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"QuoteTweetsBook","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"RetweetedByUsersBook","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"SearchTweetsBook","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"SpaceTicketBuyersBook","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"TweetsCountBook","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"UserFollowersBook","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"UserFollowingsBook","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"UserMentioningTweetsBook","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]}]},{"name":"CreateListOptions","description":"Options used for creating a new list","meta":{"line":278,"file":"ListManager.ts","path":"src/managers"},"props":[{"name":"description","description":"The description of the list","optional":true,"type":[[["string"]]]},{"name":"name","description":"The name of the list","optional":false,"type":[[["string"]]]},{"name":"private","description":"Whether the list should be private","optional":true,"type":[[["boolean"]]]}]},{"name":"FetchSpaceSharedTweetsOptions","description":"Options used to fetch tweets shared in a space","meta":{"line":249,"file":"SpaceManager.ts","path":"src/managers"},"props":[{"name":"cacheAfterFetching","description":"Whether to store the fetched content in cache for later use","optional":true,"type":[[["boolean"]]]},{"name":"maxResults","description":"The maximum number of tweets to fetch","optional":true,"type":[[["number"]]]}]},{"name":"FilteredStreamRuleData","description":"Options used to create a new filtered stream rule","meta":{"line":217,"file":"FilteredStreamRuleManager.ts","path":"src/managers"},"props":[{"name":"tag","description":"The label of the rule","optional":true,"type":[[["string"]]]},{"name":"value","description":"The value of the rule","optional":false,"type":[[["string"]]]}]},{"name":"FollowedListsBookOptions","meta":{"line":79,"file":"FollowedListsBook.ts","path":"src/books"},"props":[{"name":"maxResultsPerPage","description":"The maximum number of results to fetch per page","optional":true,"type":[[["number"]]]},{"name":"user","optional":false,"type":[[["UserResolvable"]]]}]},{"name":"LikedByUsersBookOptions","meta":{"line":79,"file":"LikedByUsersBook.ts","path":"src/books"},"props":[{"name":"maxResultsPerPage","description":"The maximum number of results to fetch per page","optional":true,"type":[[["number"]]]},{"name":"tweet","optional":false,"type":[[["TweetResolvable"]]]}]},{"name":"LikedTweetsBookOptions","meta":{"line":80,"file":"LikedTweetsBook.ts","path":"src/books"},"props":[{"name":"maxResultsPerPage","description":"The maximum number of results to fetch per page","optional":true,"type":[[["number"]]]},{"name":"user","optional":false,"type":[[["UserResolvable"]]]}]},{"name":"ListFollowersBookOptions","meta":{"line":77,"file":"ListFollowersBook.ts","path":"src/books"},"props":[{"name":"list","optional":false,"type":[[["ListResolvable"]]]},{"name":"maxResultsPerPage","description":"The maximum number of results to fetch per page","optional":true,"type":[[["number"]]]}]},{"name":"ListMembersBookOptions","meta":{"line":77,"file":"ListMembersBook.ts","path":"src/books"},"props":[{"name":"list","optional":false,"type":[[["ListResolvable"]]]},{"name":"maxResultsPerPage","description":"The maximum number of results to fetch per page","optional":true,"type":[[["number"]]]}]},{"name":"ListTweetsBookOptions","meta":{"line":80,"file":"ListTweetsBook.ts","path":"src/books"},"props":[{"name":"list","optional":false,"type":[[["ListResolvable"]]]},{"name":"maxResultsPerPage","description":"The maximum number of results to fetch per page","optional":true,"type":[[["number"]]]}]},{"name":"MemberOfListsBookOptions","meta":{"line":79,"file":"MemberOfListsBook.ts","path":"src/books"},"props":[{"name":"maxResultsPerPage","description":"The maximum number of results to fetch per page","optional":true,"type":[[["number"]]]},{"name":"user","optional":false,"type":[[["UserResolvable"]]]}]},{"name":"MutedUsersBookOptions","meta":{"line":77,"file":"MutedUsersBook.ts","path":"src/books"},"props":[{"name":"maxResultsPerPage","description":"The maximum number of results to fetch per page","optional":true,"type":[[["number"]]]},{"name":"user","optional":false,"type":[[["UserResolvable"]]]}]},{"name":"OwnedListsBookOptions","meta":{"line":77,"file":"OwnedListsBook.ts","path":"src/books"},"props":[{"name":"maxResultsPerPage","description":"The maximum number of results to fetch per page","optional":true,"type":[[["number"]]]},{"name":"user","optional":false,"type":[[["UserResolvable"]]]}]},{"name":"PinnedListsBookOptions","meta":{"line":79,"file":"PinnedListsBook.ts","path":"src/books"},"props":[{"name":"maxResultsPerPage","description":"The maximum number of results to fetch per page","optional":true,"type":[[["number"]]]},{"name":"user","optional":false,"type":[[["UserResolvable"]]]}]},{"name":"QueryParameters","meta":{"line":117,"file":"BaseClient.ts","path":"src/client"},"props":[{"name":"listExpansions","optional":true,"type":[[["Array","<"],["'owner","_"],["id'",">"]]]},{"name":"listFields","optional":true,"type":[[["Array","<"],["keyof"," "],["APIList",">"]]]},{"name":"mediaFields","optional":true,"type":[[["Array","<"],["keyof"," "],["APIMedia",">"]]]},{"name":"placeFields","optional":true,"type":[[["Array","<"],["keyof"," "],["APIPlace",">"]]]},{"name":"pollFields","optional":true,"type":[[["Array","<"],["keyof"," "],["APIPoll",">"]]]},{"name":"spaceExpansions","optional":true,"type":[[["Array","<"],["APISpaceExpansionsParameterType",">"]]]},{"name":"spaceFields","optional":true,"type":[[["Array","<"],["keyof"," "],["APISpace",">"]]]},{"name":"tweetExpansions","optional":true,"type":[[["Array","<"],["APITweetExpansionsParameterType",">"]]]},{"name":"tweetFields","optional":true,"type":[[["Array","<"],["keyof"," "],["APITweet",">"]]]},{"name":"userExpansions","optional":true,"type":[[["Array","<"],["'pinned","_"],["tweet","_"],["id'",">"]]]},{"name":"userFields","optional":true,"type":[[["Array","<"],["keyof"," "],["APIUser",">"]]]}]},{"name":"QuoteTweetsBookOptions","meta":{"line":69,"file":"QuoteTweetsBook.ts","path":"src/books"},"props":[{"name":"maxResultsPerPage","description":"The maximum number of results to fetch per page","optional":true,"type":[[["number"]]]},{"name":"tweetId","optional":false,"type":[[["string"]]]}]},{"name":"RequestDataOptions","meta":{"line":18,"file":"Miscellaneous.ts","path":"src/structures/misc"},"props":[{"name":"body","description":"The body for the request","optional":true,"type":[[["B"]]]},{"name":"isStreaming","description":"Whether the request results in a persisent http connection","optional":true,"type":[[["boolean"]]]},{"name":"isUserContext","description":"Whether the request should be authorized with user context authorization","optional":true,"type":[[["boolean"]]]},{"name":"query","description":"The query for the request","optional":true,"type":[[["Q"]]]}]},{"name":"RetweetedByUsersBookOptions","meta":{"line":79,"file":"RetweetedByUsersBook.ts","path":"src/books"},"props":[{"name":"maxResultsPerPage","description":"The maximum number of results to fetch per page","optional":true,"type":[[["number"]]]},{"name":"tweet","optional":false,"type":[[["TweetResolvable"]]]}]},{"name":"SearchSpacesOptions","description":"Options used to search spaces","meta":{"line":285,"file":"SpaceManager.ts","path":"src/managers"},"props":[{"name":"cacheAfterFetching","description":"Whether to store the fetched content in cache for later use","optional":true,"type":[[["boolean"]]]},{"name":"maxResults","description":"The number of maximum spaces to fetch","optional":true,"type":[[["number"]]]},{"name":"state","description":"The state of the spaces to match","optional":true,"default":"'all'","type":[[["'all'"," | "],["'live'"," | "],["'scheduled'"]]]}]},{"name":"SearchTweetsBookOptions","meta":{"line":80,"file":"SearchTweetsBook.ts","path":"src/books"},"props":[{"name":"afterTweet","description":"Only return tweets that were created after this tweet","optional":true,"type":[[["TweetResolvable"]]]},{"name":"beforeTweet","description":"Only return tweets that were created before this tweet","optional":true,"type":[[["TweetResolvable"]]]},{"name":"endTime","description":"Only return tweets that were created at or before this time","optional":true,"type":[[["number"," | "],["Date"]]]},{"name":"maxResultsPerPage","description":"The maximum number of results to fetch per page","optional":true,"type":[[["number"]]]},{"name":"query","optional":false,"type":[[["string"]]]},{"name":"sortOrder","description":"The order in which tweets should be returned","optional":false,"default":"'recency'","type":[[["undefined"," | "],["'recency'"," | "],["'relevancy'"]]]},{"name":"startTime","description":"Only return tweets that were created at or after this time","optional":true,"type":[[["number"," | "],["Date"]]]}]},{"name":"SpaceTicketBuyersBookOptions","meta":{"line":76,"file":"SpaceTicketBuyersBook.ts","path":"src/books"},"props":[{"name":"maxResultsPerPage","description":"The maximum number of results to fetch per page","optional":true,"type":[[["number"]]]},{"name":"space","optional":false,"type":[[["SpaceResolvable"]]]}]},{"name":"StructureConstructable","meta":{"line":84,"file":"BaseManager.ts","path":"src/managers"},"props":[{"name":"constructor","optional":false}]},{"name":"TweetCreateGeoOptions","meta":{"line":349,"file":"TweetManager.ts","path":"src/managers"},"props":[{"name":"placeId","optional":false,"type":[[["string"]]]}]},{"name":"TweetCreateMediaOptions","meta":{"line":353,"file":"TweetManager.ts","path":"src/managers"},"props":[{"name":"mediaIds","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"taggedUsers","optional":true,"type":[[["Array","<"],["UserResolvable",">"]]]}]},{"name":"TweetCreateOptions","description":"Options used to craete a tweet","meta":{"line":336,"file":"TweetManager.ts","path":"src/managers"},"props":[{"name":"directMessageDeepLink","optional":true,"type":[[["string"]]]},{"name":"excludeReplyUsers","optional":true,"type":[[["Array","<"],["UserResolvable",">"]]]},{"name":"forSuperFollowersOnly","optional":true,"type":[[["boolean"]]]},{"name":"geo","optional":true,"type":[[["TweetCreateGeoOptions"]]]},{"name":"inReplyToTweet","optional":true,"type":[[["TweetResolvable"]]]},{"name":"media","optional":true,"type":[[["TweetCreateMediaOptions"]]]},{"name":"poll","optional":true,"type":[[["TweetCreatePollOptions"]]]},{"name":"quoteTweet","optional":true,"type":[[["TweetResolvable"]]]},{"name":"replySettings","optional":true,"type":[[["APITweetReplySettings"]]]},{"name":"text","optional":true,"type":[[["string"]]]}]},{"name":"TweetCreatePollOptions","meta":{"line":358,"file":"TweetManager.ts","path":"src/managers"},"props":[{"name":"durationMinutes","optional":false,"type":[[["number"]]]},{"name":"options","optional":false,"type":[[["Array","<"],["string",">"]]]}]},{"name":"TweetsCountBookOptions","meta":{"line":69,"file":"TweetsCountBook.ts","path":"src/books"},"props":[{"name":"afterTweet","description":"Only return tweets that were created after this tweet","optional":true,"type":[[["TweetResolvable"]]]},{"name":"beforeTweet","description":"Only return tweets that were created before this tweet","optional":true,"type":[[["TweetResolvable"]]]},{"name":"endTime","description":"Only return tweets that were created at or before this time","optional":true,"type":[[["number"," | "],["Date"]]]},{"name":"granularity","description":"The granularity of the {@link TweetCountBucket}","optional":true,"type":[[["'minute'"," | "],["'hour'"," | "],["'day'"]]]},{"name":"maxResultsPerPage","description":"The maximum number of results to fetch per page","optional":true,"type":[[["number"]]]},{"name":"query","description":"The query for matching tweets","optional":false,"type":[[["string"]]]},{"name":"startTime","description":"Only return tweets that were created at or after this time","optional":true,"type":[[["number"," | "],["Date"]]]}]},{"name":"UserFollowersBookOptions","meta":{"line":77,"file":"UserFollowersBook.ts","path":"src/books"},"props":[{"name":"maxResultsPerPage","description":"The maximum number of results to fetch per page","optional":true,"type":[[["number"]]]},{"name":"user","optional":false,"type":[[["UserResolvable"]]]}]},{"name":"UserFollowingsBookOptions","meta":{"line":77,"file":"UserFollowingsBook.ts","path":"src/books"},"props":[{"name":"maxResultsPerPage","description":"The maximum number of results to fetch per page","optional":true,"type":[[["number"]]]},{"name":"user","optional":false,"type":[[["UserResolvable"]]]}]},{"name":"UserMentioningTweetsBookOptions","meta":{"line":84,"file":"UserMentioningTweetsBook.ts","path":"src/books"},"props":[{"name":"afterTweet","description":"Only return tweets that were created after this tweet","optional":true,"type":[[["TweetResolvable"]]]},{"name":"beforeTweet","description":"Only return tweets that were created before this tweet","optional":true,"type":[[["TweetResolvable"]]]},{"name":"endTime","description":"Only return tweets that were created at or before this time","optional":true,"type":[[["number"," | "],["Date"]]]},{"name":"maxResultsPerPage","description":"The maximum number of results to fetch per page","optional":true,"type":[[["number"]]]},{"name":"startTime","description":"Only return tweets that were created at or after this time","optional":true,"type":[[["number"," | "],["Date"]]]},{"name":"user","optional":false,"type":[[["UserResolvable"]]]}]},{"name":"ClientEventArgsType","type":[[["K"," "],["extends"," "],["keyof"," "],["ClientEventsMapping"," ? "],["ClientEventsMapping","["],["K","] : "],["Array","<"],["any",">"]]],"meta":{"line":86,"file":"BaseClient.ts","path":"src/client"}},{"name":"ClientEventKeyType","type":[[["K"," "],["extends"," "],["keyof"," "],["ClientEventsMapping"," ? "],["LiteralUnion","<"],["K","> : "],["Exclude","<"],["K",", "],["keyof"," "],["ClientEventsMapping",">"]]],"meta":{"line":88,"file":"BaseClient.ts","path":"src/client"}},{"name":"ClientEventListenerType","type":[[["K"," "],["extends"," "],["keyof"," "],["ClientEventsMapping"," ? "],["ClientEventsMapping","["],["K","] : "],["Array","<"],["any",">"]]],"meta":{"line":93,"file":"BaseClient.ts","path":"src/client"}},{"name":"CreateBookNameType","type":[[["keyof"," ("],["typeof"," "],["Books",")"]]],"meta":{"line":340,"file":"Client.ts","path":"src/client"}},{"name":"CreateBookOptionType","type":[[["K"," "],["extends"," "],["keyof"," "],["CreateBookMapping"," ? "],["CreateBookMapping","["],["K","]["],["1","] : "],["Array","<"],["unknown",">"]]],"meta":{"line":313,"file":"Client.ts","path":"src/client"}},{"name":"CreateBookReturnType","type":[[["K"," "],["extends"," "],["keyof"," "],["CreateBookMapping"," ? "],["CreateBookMapping","["],["K","]["],["0","] : "],["Array","<"],["unknown",">"]]],"meta":{"line":315,"file":"Client.ts","path":"src/client"}},{"name":"FetchFilteredStreamRuleOptions","description":"Options used to feth a single filtered stream rule","type":[[["BaseFetchOptions"]]],"meta":{"line":196,"file":"FilteredStreamRuleManager.ts","path":"src/managers"}},{"name":"FetchFilteredStreamRuleOrRulesOptions","description":"Options used to fetch one or more filter stream rules","type":[[["R"," "],["extends"," "],["FilteredStreamRuleResolvable"," ? "],["FetchFilteredStreamRuleOptions"," : "],["FetchFilteredStreamRulesOptions"]]],"meta":{"line":206,"file":"FilteredStreamRuleManager.ts","path":"src/managers"}},{"name":"FetchFilteredStreamRulesOptions","description":"Options used to feth multiple filtered stream rules","type":[[["Omit","<"],["BaseFetchOptions",", "],["'skipCacheCheck'",">"]]],"meta":{"line":201,"file":"FilteredStreamRuleManager.ts","path":"src/managers"}},{"name":"FetchListOptions","description":"Options used to fetch a single list","type":[[["BaseFetchOptions"]]],"meta":{"line":273,"file":"ListManager.ts","path":"src/managers"}},{"name":"FetchSpaceOptions","description":"Options used to fetch a single space","type":[[["BaseFetchOptions"]]],"meta":{"line":259,"file":"SpaceManager.ts","path":"src/managers"}},{"name":"FetchSpaceOrSpacesOptions","description":"Options used to fetch one or more spaces","type":[[["S"," "],["extends"," "],["SpaceResolvable"," ? "],["FetchSpaceOptions"," : "],["FetchSpacesOptions"]]],"meta":{"line":269,"file":"SpaceManager.ts","path":"src/managers"}},{"name":"FetchSpacesByCreatorsOptions","description":"Options used to fetch live or scheduled spaces created by a user or users","type":[[["Omit","<"],["BaseFetchOptions",", "],["'skipCacheCheck'",">"]]],"meta":{"line":280,"file":"SpaceManager.ts","path":"src/managers"}},{"name":"FetchSpacesOptions","description":"Options used to fetch multiple spaces","type":[[["Omit","<"],["BaseFetchOptions",", "],["'skipCacheCheck'",">"]]],"meta":{"line":264,"file":"SpaceManager.ts","path":"src/managers"}},{"name":"FetchTweetOptions","description":"Options used to feth a single tweet","type":[[["BaseFetchOptions"]]],"meta":{"line":315,"file":"TweetManager.ts","path":"src/managers"}},{"name":"FetchTweetOrTweetsOptions","description":"Options used to fetch one or more tweets","type":[[["T"," "],["extends"," "],["TweetResolvable"," ? "],["FetchTweetOptions"," : "],["FetchTweetsOptions"]]],"meta":{"line":325,"file":"TweetManager.ts","path":"src/managers"}},{"name":"FetchTweetsOptions","description":"Options used to feth multiple tweets","type":[[["Omit","<"],["BaseFetchOptions",", "],["'skipCacheCheck'",">"]]],"meta":{"line":320,"file":"TweetManager.ts","path":"src/managers"}},{"name":"FetchUserByUsernameOptions","description":"Options used to fetch a single user by its username","type":[[["BaseFetchOptions"]]],"meta":{"line":372,"file":"UserManager.ts","path":"src/managers"}},{"name":"FetchUserOptions","description":"Options used to fetch a single user","type":[[["BaseFetchOptions"]]],"meta":{"line":362,"file":"UserManager.ts","path":"src/managers"}},{"name":"FetchUserOrUsersByUsernameOptions","description":"Options used to fetch one or more users by using their usernames","type":[[["U"," "],["extends"," "],["string"," ? "],["FetchUserByUsernameOptions"," : "],["FetchUsersByUsernamesOptions"]]],"meta":{"line":393,"file":"UserManager.ts","path":"src/managers"}},{"name":"FetchUserOrUsersOptions","description":"Options used to fetch one or more users","type":[[["U"," "],["extends"," "],["UserResolvable"," ? "],["FetchUserOptions"," : "],["FetchUsersOptions"]]],"meta":{"line":382,"file":"UserManager.ts","path":"src/managers"}},{"name":"FetchUsersByUsernamesOptions","description":"Options used to fetch multiple users by their usernames","type":[[["Omit","<"],["BaseFetchOptions",", "],["'skipCacheCheck'",">"]]],"meta":{"line":377,"file":"UserManager.ts","path":"src/managers"}},{"name":"FetchUsersOptions","description":"Options used to fetch multiple users","type":[[["Omit","<"],["BaseFetchOptions",", "],["'skipCacheCheck'",">"]]],"meta":{"line":367,"file":"UserManager.ts","path":"src/managers"}},{"name":"FilteredStreamRuleManagerFetchResult","type":[[["R"," "],["extends"," "],["FilteredStreamRuleResolvable"," ? "],["FilteredStreamRule"," : "],["Collection","<"],["string",", "],["FilteredStreamRule",">"]]],"meta":{"line":210,"file":"FilteredStreamRuleManager.ts","path":"src/managers"}},{"name":"FilteredStreamRuleResolvable","type":[[["FilteredStreamRule"," | "],["string"]]],"meta":{"line":230,"file":"FilteredStreamRuleManager.ts","path":"src/managers"}},{"name":"ListResolvable","type":[[["List"," | "],["SimplifiedList"," | "],["string"]]],"meta":{"line":300,"file":"ListManager.ts","path":"src/managers"}},{"name":"LiteralUnion","type":[[["K"," | "],["T"," & {"],["\nzz","_"],["ignore","_"],["me",": "],["never\n","}"]]],"meta":{"line":95,"file":"BaseClient.ts","path":"src/client"}},{"name":"SpaceManagerFetchResult","type":[[["S"," "],["extends"," "],["SpaceResolvable"," ? "],["Space"," : "],["Collection","<"],["string",", "],["Space",">"]]],"meta":{"line":273,"file":"SpaceManager.ts","path":"src/managers"}},{"name":"SpaceResolvable","type":[[["Space"," | "],["SimplifiedSpace"," | "],["string"]]],"meta":{"line":298,"file":"SpaceManager.ts","path":"src/managers"}},{"name":"TweetManagerFetchResult","type":[[["T"," "],["extends"," "],["TweetResolvable"," ? "],["Tweet"," : "],["Collection","<"],["string",", "],["Tweet",">"]]],"meta":{"line":329,"file":"TweetManager.ts","path":"src/managers"}},{"name":"TweetQuoteOptions","description":"Options used to quote a tweet","type":[[["Omit","<"],["TweetCreateOptions",", "],["'quoteTweet'",">"]]],"meta":{"line":261,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"TweetReplyOptions","description":"Options used to reply to a tweet","type":[[["Omit","<"],["TweetCreateOptions",", "],["'inReplyToTweet'",">"]]],"meta":{"line":256,"file":"SimplifiedTweet.ts","path":"src/structures"}},{"name":"TweetResolvable","type":[[["Tweet"," | "],["SimplifiedTweet"," | "],["string"]]],"meta":{"line":363,"file":"TweetManager.ts","path":"src/managers"}},{"name":"UpdateListOptions","description":"Options used to update a list","type":[[["Partial","<"],["CreateListOptions",">"]]],"meta":{"line":298,"file":"ListManager.ts","path":"src/managers"}},{"name":"UserManagerFetchByUsernameResult","type":[[["U"," "],["extends"," "],["string"," ? "],["User"," : "],["Collection","<"],["string",", "],["User",">"]]],"meta":{"line":397,"file":"UserManager.ts","path":"src/managers"}},{"name":"UserManagerFetchResult","type":[[["U"," "],["extends"," "],["UserResolvable"," ? "],["User"," : "],["Collection","<"],["string",", "],["User",">"]]],"meta":{"line":386,"file":"UserManager.ts","path":"src/managers"}},{"name":"UserResolvable","type":[[["User"," | "],["SimplifiedUser"," | "],["Tweet"," | "],["SimplifiedTweet"," | "],["string"]]],"meta":{"line":401,"file":"UserManager.ts","path":"src/managers"}}]}